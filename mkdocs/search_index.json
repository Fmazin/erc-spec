{
    "docs": [
        {
            "location": "/",
            "text": "Executable Research Compendium\n\n\n\n\nSpecification\n\n\nUser guide\n\n\nManual ERC creation\n\n\nERC templates\n\n\n\n\n\n\nDeveloper guide\n\n\n\n\nCredits\n\n\nThis specification and guides are developed by the members of the DFG-funded project Opening Reproducible Research\n\n\n\n\nLicense\n\n\n\n\nThe o2r Executable Research Compendium specification is licensed under \nCreative Commons CC0 1.0 Universal License\n, see file \nLICENSE\n.\nTo the extent possible under law, the people who associated CC0 with this work have waived all copyright and related or neighboring rights to this work.\nThis work is published from: Germany.\n\n\nBuild @@VERSION@@ @ @@TIMESTAMP@@",
            "title": "Home"
        },
        {
            "location": "/#executable-research-compendium",
            "text": "Specification  User guide  Manual ERC creation  ERC templates    Developer guide",
            "title": "Executable Research Compendium"
        },
        {
            "location": "/#credits",
            "text": "This specification and guides are developed by the members of the DFG-funded project Opening Reproducible Research",
            "title": "Credits"
        },
        {
            "location": "/#license",
            "text": "The o2r Executable Research Compendium specification is licensed under  Creative Commons CC0 1.0 Universal License , see file  LICENSE .\nTo the extent possible under law, the people who associated CC0 with this work have waived all copyright and related or neighboring rights to this work.\nThis work is published from: Germany.  Build @@VERSION@@ @ @@TIMESTAMP@@",
            "title": "License"
        },
        {
            "location": "/spec/",
            "text": "ERC specification\n\n\nAn Exectuable Research Compendium (ERC) is a packaging convention for computational research.\nIt provides a well-defined structure for data, code, text, documentation, user interface and control of a piece of research and is suitable for long-term archival. As such it can also be perceived as a digital object or asset.\n\n\n\nThis is a draft specification. If you have comments or suggestions please file them in the \nissue tracker\n. If you have explicit changes please fork the \ngit repo\n and submit a pull request.\n\n\n\n\nVersion\n\n\nThe version of this specification is \n1\n.\nThis version is \nunder development\n!\n\n\nTable of contents\n\n\n\n\nIntroduction\n\n\nNotational conventions\n\n\nPurpose\n\n\nFundamental concepts\n\n\n\n\n\n\nStructure\n\n\nSecurity\n\n\nExtensions\n\n\nDocker runtime extension\n\n\nArchival extension\n\n\nR extension\n\n\nValidation extension\n\n\n\n\n\n\nExtensions - \nDrafts and Ideas\n\n\nPlain R runtime extension\n\n\nManipulation extension\n\n\nProgress extension\n\n\nContainer bundling extension\n\n\n\n\n\n\nGlossary\n\n\n\n\nNotational conventions\n\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as described in \nRFC 2119\n.\n\n\nThe key words \"unspecified\", \"undefined\", and \"implementation-defined\" are to be interpreted as described in the \nrationale for the C99 standard\n.\n\n\nPurpose\n\n\nThis specification defines a structure to carry and execute a computational scientific analyses (cf. \ncomputational science\n).\n\n\nThese analyses typically comprise a workspace on a researcher's computer, which comprises \ndata\n, \ncode\n, third party software or libraries, and outputs such as plots.\nCode and libraries are required in executable form to re-do an analysis.\nResearch is only put into a context by a \ntextual\n publication, which is published in \nscholarly communication\n.\nThe text comes in two forms: one that is machine readable, and another one that is suitable for being read by humans.\nThe latter is often derived, or \"rendered\", from the former and can be static, visual, or even interactive.\n\n\nPutting all of this elements in a self-contained bundle allows understanding, reproducing, transferring, archiving, and validating computational research.\nThe ERC specification defines metadata and file structures to support these actions.\n\n\nFundamental design concepts\n\n\nThe ERC specification is inspired by two approaches to improve development and operation of software.\nFirst,  \n\"convention  over  configuration\"\n, e.g. as  practiced  in  the Java build tool \nMaven\n.\nSecond, \n\"DevOps\"\n, see \nWikipedia\n or \nBoettiger\n.\n\n\nAnother core goal is \nsimplicity\n.\nThis specification should not re-do something which already exists (if it is an open specification or tool).\nIt must be possible to create a valid and working ERC manually.\n\n\nThe final important notion is the one of \nnested containers\n.\nWe acknowledge well defined standards for packaging a set of files, and different approaches to create an executable code package.\nTherefore the an ERC comprises \none or more containers but is itself subject to being put into a container\n.\nWe distinguish these containers into the inner or \"runtime\" container and the outer container, which is used for transfer of complete ERC and not content-aware validation\n\n\nHow to use an ERC\n\n\nThe steps to (re-)run the analysis contained in an ERC are as follows:\n\n\n\n\n(if compressed first extract then) unpack the ERC's outer container\n\n\nexecute the runtime container\n\n\ncompare the output files contained in the outer container with the just output files just created by the runtime container\n\n\n\n\nThis way ERC allow computational reproducibility based on the original code and data.\n\n\nERC structure\n\n\nBase directory\n\n\nAn ERC MUST have a \nbase directory\n. The name of the base directory MUST only contain characters, numbers, \n_\n (underscore) and \n-\n (minus sign).\nThat directory is part of the \nbundle\n.\nIn other words, an archive of an ERC will have one top-level directory with the name of the base directory.\n\n\nRegular expression\n for base directory name: \n[a-zA-Z0-9\\-_]\n\n\nThe base directory MUST contain an \nERC configuration file\n.\n\n\nBesides the files mentioned in this specification, the base directory may contain any other file and directories.\n\n\nMain document & display file\n\n\nAn ERC MUST have a \nmain document\n, i.e. the file which contains the text and instructions being the basis for the scientific publication describing the packaged analysis.\nThe main document's name SHOULD be \nmain\n with an appropriate extension and media type.\nFor example if the main document is RMarkdown, then the extension should be \n.Rmd\n and the media type \ntext/markdown\n.\n\n\nAn ERC MUST have a \ndisplay file\n, i.e. the file which is shown to the user first when he opens an ERC in a supporting platform or tool.\nThe display file's name SHOULD be \nview\n with an appropriate extension and media type.\nFor example if the main document is Hypertext Markup Language (HTML), then the extension should be \n.htm\n or \n.html\n and the media type \ntext/html\n.\n\n\nThe display file is often \"rendered\" from the main file.\n\n\nNested runtime\n\n\nThe embedding of a representation of the original runtime environment, in which an analysis was conducted, is crucial for supporting reproducible computations.\nThis section defines two such representations.\nFirst, an executable image.\nSecond, a manifest documenting the image's contents.\n\n\nThe format of these representations is undefined here and can be stated more precisely in an extension to this specification.\n\n\nA concrete runtime extension may choose to (a) embed the runtime environment in the image, or (b) to rely on constructing the runtime environment from the manifest.\n\n\nRuntime environment or image\n\n\nThe base directory SHOULD contain a runnable image, e.g. a \"binary\", of the original analysis environment that can be used to re-run the packaged analysis using a suitable software.\n\n\nThe image file may be compressed.\nIt SHOULD be named \nimage\n with an appropriate extension, such as \n.tar\n or \n.bin\n, and have an appropriate mime type, e.g. \napplication/vnd.oci.image.layer.tar+gzip\n.\n\n\nThe output of the image execution can be shown to the user to convey detailed information on progress or errors.\n\n\nRuntime manifest\n\n\nThe base directory MUST contain a complete, self-consistent manifest of the runtime image's contents.\n\n\nThis manifest MUST be in a machine-readable format that allows a respective tool to create the runtime image.\n\n\nA concrete runtime extension MUST define the command to create the runnable environment from the manifest.\n\n\nRuntime manipulation\n\n\nBundling a complete runtime gives the possibility to manipulate the contained workflow or exchange data.\n\n\nThe manipulation parameters SHOULD be defined in a concrete runtime extension.\n\n\nThe data replacement proccess SHOULD be define in a concrete runtime extension.\n\n\nERC configuration file\n\n\nThe ERC configuration file is the \nreproducibility manifest\n for an ERC. It defines the main entry points for actions performed on an ERC and core metadata elements.\n\n\nName, format, and encoding\n\n\nThe filename MUST be \nerc.yml\n and it MUST be located in the base directory.\nThe contents MUST be valid \nYAML 1.2\n.\nThe file MUST be encoded in \nUTF-8\n and MUST NOT contain a byte-order mark (BOM).\n\n\nRequired fields\n\n\nThe first document content of this file MUST contain the following string nodes at the root level.\n\n\n\n\nspec_version\n: a text string noting the version of the used ERC specification. The appropriate version for an ERC conforming to this version of the specification is \n1\n.\n\n\nid\n: globally unique identifier for a specific ERC. This SHOULD be a URI (see \nrfc3986\n) or a \nUUID\n, Version 4.\n\n\n\n\nMinimal example:\n\n\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\n\n\n\n\nThe main and display file can be defined in root-level nodes named \nmain\n and \ndisplay\n respectively:\n\n\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nmain: the_paper_document.odt\ndisplay: output.html\n\n\n\n\nControl statements\n\n\nThe configuration file MUST contain \nbash\n statements to control the runtime container.\n\n\nThese statements MUST be in an array under the node \ncommand\n under the root-level node \nexecution\n in the ERC configuration file.\n\n\nDefault command statements SHOULD be defined by an extension for a working ERC.\n\n\nThe exectution statements SHOULD ensure, that the re-computation is independent from the environment that may be different depending on the host.\nThis includes, for example, setting the time zone via an environment variable \n-e TZ=CET\n so that output formatting of timestamps does not break validation.\nThis can also be handled by the ERC author on script level.\n\n\nExample control statements:\n\n\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nexecution:\n  command:\n    - `./prepare.sh --input my_data`\n    - `./execute.sh --output results --iterations 3`\n\n\n\n\nLicense metadata\n\n\nThe file \nerc.yml\n MUST contain a first level node \nlicenses\n with licensing information for the code, data, and text contained.\nEach of these three have distinct requirements, hence different licenses need to be applied.\n\n\nThe node \nlicenses\n MUST have three children: \ncode\n, \ndata\n, \ntext\n.\n\n\n\nThere is currently no mechanism to define the licenses of the used libraries, as manual creation would be tedious.\nTools for automatic creation of ERC may add such detailed licensing information and define an extension to the ERC \n\n\n\n\nThe content of each of these child nodes MUST be one of the following\n\n\n\n\ntext string with license identifier or license text. This SHOULD be a standardized identifier of an existing license as defined by the \nOpen Definition Licenses Service\n.\n\n\na dictionary of all files or directories and their respective license, each of the values following the previous statement. The node values are the file paths relative to the base directory.\n\n\n\n\nExample for global licenses:\n\n\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nlicenses:\n  code: Apache-2.0\n  data: ODbL-1.0\n  text: CC0-1.0\n\n\n\n\nExample using specific licenses for files:\n\n\n---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nlicenses:\n  code:\n    others_lib.bin: MIT\n    my_code.c: GPL-3.0\n  text:\n    README.md: CC0-1.0\n    paper/chapter01.doc: CC-BY-4.0\n    paper/chapter02.tex: CC-BY-4.0\n\n\n\n\n\nIt IS NOT possible to assign one license to a directory and override that assignment or a single file within that directory, NOR IS it possible to use globs or regular expressions.\n\n\n\n\nExtension metadata\n\n\nIf an extension of the specification is used, it MUST be put into a list under the root-level node \nextensions\n.\n\n\n---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nextensions:\n  - extension_name_1\n  - \"yet another extension\"\n\n\n\n\nThis list SHOULD be used by implementations that support these extensions to comply with validation checks or processes as defined by the extensions.\n\n\nIf an implementation encounters an unsupported extension it MUST issue a user level warning.\n\n\nIf an implementation supports an extension it MUST use default settings, for example for control commands, as defined in the extension.\n\n\nIf an extension creates additional (custom) metadata fields, they MUST NOT interfere with the structure defined in this document.\nHowever, it is unspecified into which root node or nodes of the ERC configuration file these metadata should go.\n\n\nComprehensive example of erc.yml\n\n\nThe following example shows all possible fields of the core specification with example values.\n\n\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nstructure:\n  payload_directory: \"data\" # folder name including the workspace, after using bagger  \n  config_file: \"erc.yml\"\n  container_file: \"image.tar\"\n  container_manifest: \"Dockerfile\"\nexecution:\n  mountpoint: \"/erc\" # name of the volume used in the Dockerfile\n  command: \"Rscript -e 'rmarkdown::render(input = \\\"paper.Rmd\\\", output_format = \\\"html\\\")'\"\nlicenses: # licenses that the author chooses for their files\n  code:\n    others_lib.bin: MIT\n    my_code.c: GPL-3.0\n  text:\n    README.md: CC0-1.0\n    paper/chapter01.doc: CC-BY-4.0\n    paper/chapter02.tex: CC-BY-4.0\nextensions:\n  - extension_name_1\n  - \"yet another extension\"\n\n\n\n\nThe path to the ERC configuration file subsequently MUST be \n<path-to-bag>/data/erc.yml\n.\n\n\n.ercignore file\n\n\nThe ERC MAY contain a file named \n.ercignore\n in the base directory.\nIf this file is present, any files and directories within the outer container which match the patterns within the file \n.ercignore\n will be excluded from the validation process.\nThe newline-separated patterns in the file MUST be \nUnix shell globs\n.\n\n\nThe following \nmedia types\n (see \nIANA's full list of media types\n) are regular expressions of file formats that CAN be used:\n\n\n\n\ntext/*\n\n\napplication/json\n\n\n*+xml\n\n\n*+json\n\n\n\n\nContent metadata\n\n\nMetadata elements \nunder development\n\n\nCurrent JSON dummy to visualise the properties. It SHOULD be filled out as good as possible.\n\n\n{\n    \"author\": [{\n        \"name\": null,\n        \"affiliation\": [],\n        \"orcid\": null\n    }],\n    \"community\": \"o2r\",\n    \"depends\": [{\n        \"identifier\": null,\n        \"version\": null,\n        \"packageSystem\": null,\n    }],\n    \"description\": null,\n    \"ercIdentifier\": null,\n    \"file\": {\n        \"filename\": null,\n        \"filepath\": null,\n        \"mimetype\": null\n    },\n    \"generatedBy\": null,\n    \"interaction\": {\n        \"interactive\": false\n    },\n    \"keywords\": [],\n    \"license\": null,\n    \"paperLanguage\": [],\n    \"paperSource\": null,\n    \"publicationDate\": null,\n    \"recordDateCreated\": null,\n    \"softwarePaperCitation\": null,\n    \"spatial\": {\n        \"files\": [],\n        \"union\": []\n    },\n    \"temporal\": {\n        \"begin\": null,\n        \"end\": null\n    },\n    \"title\": null\n}\n\n\n\n\nThe path to the o2r metadata file MUST be \n<path-to-bag>/data/metadata.json\n.\n\n\nDescription of metadata properties\n\n\nDefining explanations on the concept of each metadata element in use.\n\n\n\n\nauthor\n Contains a list of author related information.\n\n\nauthor.affiliation\n A list of institutions, organizations or other groups that the creator of the asset is associated with.\n\n\nauthor.name\n The name of the human individual, institution, organization, machine or other entity that acts as creator of the asset.\n\n\nauthor.orcid\n the ORCid of the creator of the asset.\n\n\ncommunity\n Indicates belonging to a scientific community, e.g. on a repositoy platform.\n\n\ndepends\n A block for each entity that the software is dependent on for execution.\n\n\ndepends.identifier\n An identifying name for the depending package.\n\n\ndepends.version\n The computer software and hardware required to run the software.\n\n\ndepends.packageSystem\n The package manager system that makes the dependency entity available.\n\n\ndescription\n A text representation conveying the purpose and scope of the asset (the abstract).\n\n\nercIdentifier\n A universally unique character string associated with the asset as \nexecutable research compendium\n, provided by the o2r service.\n\n\nfile\n A block for the main source file for the metadata (e.g. rmd file), generated and used by the o2r service.\n\n\nfile.filename\n see above \n\n\nfile.filepath\n see above \n\n\nfile.mimetype\n see above \n\n\ngeneratedBy\n The entity, person or tool, that created the software.\n\n\ninteraction\n Information on how to interact with the asset.\n\n\ninteraction.interactive\n indicates interaction such as shiny app dynamics is possible.\n\n\nkeywords\n Tags associated with the asset.\n\n\nlicense\n License information for the entire ERC.\n\n\npaperLanguage\n A list of language codes that indicate the language of the asset, e.g. \nen\n.\n\n\npaperSource\n The text document file of the paper.\n\n\npublicationDate\n The publication date of the paper publication.\n\n\nrecordDateCreated\n The date that this metadata record was created.\n\n\nsoftwarePaperCitation\n A text string that can be used to authoritatively cite a research paper, conference proceedings or other scholarly work that describes the design, development, usage, significance or other aspect of the software.\n\n\nspatial\n Information about the geometric bounding box of the underlying data/software.\n\n\nspatial.files\n A Geojson object of the aggregated bounding boxes of the underlying data/software, generated by the o2r service.\n\n\nspatial.union\n A Geojson object displaying the spatial properties of the data.\n\n\ntemporal\n Aggregated information about the relevant time period of the underlying data sets.\n\n\ntemporal.begin\n The starting point of the relevant time period.\n\n\ntemporal.end\n The end point of the relevant time period.\n\n\ntitle\n The distinguishing name of the paper publication.\n\n\n\n\nValidation\n\n\nERC validation comprises four steps:\n\n\n\n\nchecking required metadata elements\n\n\nexecuting the runtime container\n\n\ncomparing the output files of the runtime container execution with the original output files in the outer container\n\n\n\n\n\n\n\n\nThe validation MUST NOT fail when files listed in \n.ercignore\n are failing comparison.\n\n\nThe validation SHOULD communicate all files and directories actually used for validation to the user to avoid malicious usage of an \n.ercignore\n file.\n\n\n\n\n\nSecurity considerations\n\n\nWhy are ERC not a security risk?\n\n\n\n\nthe spec prohibits use of \nEXPOSE\n\n\nthe containers are only executed \nwithout\n external network access using \nNetwork: none\n, see \nDocker CLI run documentation",
            "title": "Specification"
        },
        {
            "location": "/spec/#erc-specification",
            "text": "An Exectuable Research Compendium (ERC) is a packaging convention for computational research.\nIt provides a well-defined structure for data, code, text, documentation, user interface and control of a piece of research and is suitable for long-term archival. As such it can also be perceived as a digital object or asset.  \nThis is a draft specification. If you have comments or suggestions please file them in the  issue tracker . If you have explicit changes please fork the  git repo  and submit a pull request.",
            "title": "ERC specification"
        },
        {
            "location": "/spec/#version",
            "text": "The version of this specification is  1 .\nThis version is  under development !",
            "title": "Version"
        },
        {
            "location": "/spec/#table-of-contents",
            "text": "Introduction  Notational conventions  Purpose  Fundamental concepts    Structure  Security  Extensions  Docker runtime extension  Archival extension  R extension  Validation extension    Extensions -  Drafts and Ideas  Plain R runtime extension  Manipulation extension  Progress extension  Container bundling extension    Glossary",
            "title": "Table of contents"
        },
        {
            "location": "/spec/#notational-conventions",
            "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as described in  RFC 2119 .  The key words \"unspecified\", \"undefined\", and \"implementation-defined\" are to be interpreted as described in the  rationale for the C99 standard .",
            "title": "Notational conventions"
        },
        {
            "location": "/spec/#purpose",
            "text": "This specification defines a structure to carry and execute a computational scientific analyses (cf.  computational science ).  These analyses typically comprise a workspace on a researcher's computer, which comprises  data ,  code , third party software or libraries, and outputs such as plots.\nCode and libraries are required in executable form to re-do an analysis.\nResearch is only put into a context by a  textual  publication, which is published in  scholarly communication .\nThe text comes in two forms: one that is machine readable, and another one that is suitable for being read by humans.\nThe latter is often derived, or \"rendered\", from the former and can be static, visual, or even interactive.  Putting all of this elements in a self-contained bundle allows understanding, reproducing, transferring, archiving, and validating computational research.\nThe ERC specification defines metadata and file structures to support these actions.",
            "title": "Purpose"
        },
        {
            "location": "/spec/#fundamental-design-concepts",
            "text": "The ERC specification is inspired by two approaches to improve development and operation of software.\nFirst,   \"convention  over  configuration\" , e.g. as  practiced  in  the Java build tool  Maven .\nSecond,  \"DevOps\" , see  Wikipedia  or  Boettiger .  Another core goal is  simplicity .\nThis specification should not re-do something which already exists (if it is an open specification or tool).\nIt must be possible to create a valid and working ERC manually.  The final important notion is the one of  nested containers .\nWe acknowledge well defined standards for packaging a set of files, and different approaches to create an executable code package.\nTherefore the an ERC comprises  one or more containers but is itself subject to being put into a container .\nWe distinguish these containers into the inner or \"runtime\" container and the outer container, which is used for transfer of complete ERC and not content-aware validation",
            "title": "Fundamental design concepts"
        },
        {
            "location": "/spec/#how-to-use-an-erc",
            "text": "The steps to (re-)run the analysis contained in an ERC are as follows:   (if compressed first extract then) unpack the ERC's outer container  execute the runtime container  compare the output files contained in the outer container with the just output files just created by the runtime container   This way ERC allow computational reproducibility based on the original code and data.",
            "title": "How to use an ERC"
        },
        {
            "location": "/spec/#erc-structure",
            "text": "",
            "title": "ERC structure"
        },
        {
            "location": "/spec/#base-directory",
            "text": "An ERC MUST have a  base directory . The name of the base directory MUST only contain characters, numbers,  _  (underscore) and  -  (minus sign).\nThat directory is part of the  bundle .\nIn other words, an archive of an ERC will have one top-level directory with the name of the base directory.  Regular expression  for base directory name:  [a-zA-Z0-9\\-_]  The base directory MUST contain an  ERC configuration file .  Besides the files mentioned in this specification, the base directory may contain any other file and directories.",
            "title": "Base directory"
        },
        {
            "location": "/spec/#main-document-display-file",
            "text": "An ERC MUST have a  main document , i.e. the file which contains the text and instructions being the basis for the scientific publication describing the packaged analysis.\nThe main document's name SHOULD be  main  with an appropriate extension and media type.\nFor example if the main document is RMarkdown, then the extension should be  .Rmd  and the media type  text/markdown .  An ERC MUST have a  display file , i.e. the file which is shown to the user first when he opens an ERC in a supporting platform or tool.\nThe display file's name SHOULD be  view  with an appropriate extension and media type.\nFor example if the main document is Hypertext Markup Language (HTML), then the extension should be  .htm  or  .html  and the media type  text/html .  The display file is often \"rendered\" from the main file.",
            "title": "Main document &amp; display file"
        },
        {
            "location": "/spec/#nested-runtime",
            "text": "The embedding of a representation of the original runtime environment, in which an analysis was conducted, is crucial for supporting reproducible computations.\nThis section defines two such representations.\nFirst, an executable image.\nSecond, a manifest documenting the image's contents.  The format of these representations is undefined here and can be stated more precisely in an extension to this specification.  A concrete runtime extension may choose to (a) embed the runtime environment in the image, or (b) to rely on constructing the runtime environment from the manifest.",
            "title": "Nested runtime"
        },
        {
            "location": "/spec/#runtime-environment-or-image",
            "text": "The base directory SHOULD contain a runnable image, e.g. a \"binary\", of the original analysis environment that can be used to re-run the packaged analysis using a suitable software.  The image file may be compressed.\nIt SHOULD be named  image  with an appropriate extension, such as  .tar  or  .bin , and have an appropriate mime type, e.g.  application/vnd.oci.image.layer.tar+gzip .  The output of the image execution can be shown to the user to convey detailed information on progress or errors.",
            "title": "Runtime environment or image"
        },
        {
            "location": "/spec/#runtime-manifest",
            "text": "The base directory MUST contain a complete, self-consistent manifest of the runtime image's contents.  This manifest MUST be in a machine-readable format that allows a respective tool to create the runtime image.  A concrete runtime extension MUST define the command to create the runnable environment from the manifest.",
            "title": "Runtime manifest"
        },
        {
            "location": "/spec/#runtime-manipulation",
            "text": "Bundling a complete runtime gives the possibility to manipulate the contained workflow or exchange data.  The manipulation parameters SHOULD be defined in a concrete runtime extension.  The data replacement proccess SHOULD be define in a concrete runtime extension.",
            "title": "Runtime manipulation"
        },
        {
            "location": "/spec/#erc-configuration-file",
            "text": "The ERC configuration file is the  reproducibility manifest  for an ERC. It defines the main entry points for actions performed on an ERC and core metadata elements.",
            "title": "ERC configuration file"
        },
        {
            "location": "/spec/#name-format-and-encoding",
            "text": "The filename MUST be  erc.yml  and it MUST be located in the base directory.\nThe contents MUST be valid  YAML 1.2 .\nThe file MUST be encoded in  UTF-8  and MUST NOT contain a byte-order mark (BOM).",
            "title": "Name, format, and encoding"
        },
        {
            "location": "/spec/#required-fields",
            "text": "The first document content of this file MUST contain the following string nodes at the root level.   spec_version : a text string noting the version of the used ERC specification. The appropriate version for an ERC conforming to this version of the specification is  1 .  id : globally unique identifier for a specific ERC. This SHOULD be a URI (see  rfc3986 ) or a  UUID , Version 4.   Minimal example:  id: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1  The main and display file can be defined in root-level nodes named  main  and  display  respectively:  id: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nmain: the_paper_document.odt\ndisplay: output.html",
            "title": "Required fields"
        },
        {
            "location": "/spec/#control-statements",
            "text": "The configuration file MUST contain  bash  statements to control the runtime container.  These statements MUST be in an array under the node  command  under the root-level node  execution  in the ERC configuration file.  Default command statements SHOULD be defined by an extension for a working ERC.  The exectution statements SHOULD ensure, that the re-computation is independent from the environment that may be different depending on the host.\nThis includes, for example, setting the time zone via an environment variable  -e TZ=CET  so that output formatting of timestamps does not break validation.\nThis can also be handled by the ERC author on script level.  Example control statements:  id: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nexecution:\n  command:\n    - `./prepare.sh --input my_data`\n    - `./execute.sh --output results --iterations 3`",
            "title": "Control statements"
        },
        {
            "location": "/spec/#license-metadata",
            "text": "The file  erc.yml  MUST contain a first level node  licenses  with licensing information for the code, data, and text contained.\nEach of these three have distinct requirements, hence different licenses need to be applied.  The node  licenses  MUST have three children:  code ,  data ,  text .  \nThere is currently no mechanism to define the licenses of the used libraries, as manual creation would be tedious.\nTools for automatic creation of ERC may add such detailed licensing information and define an extension to the ERC   The content of each of these child nodes MUST be one of the following   text string with license identifier or license text. This SHOULD be a standardized identifier of an existing license as defined by the  Open Definition Licenses Service .  a dictionary of all files or directories and their respective license, each of the values following the previous statement. The node values are the file paths relative to the base directory.   Example for global licenses:  id: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nlicenses:\n  code: Apache-2.0\n  data: ODbL-1.0\n  text: CC0-1.0  Example using specific licenses for files:  ---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nlicenses:\n  code:\n    others_lib.bin: MIT\n    my_code.c: GPL-3.0\n  text:\n    README.md: CC0-1.0\n    paper/chapter01.doc: CC-BY-4.0\n    paper/chapter02.tex: CC-BY-4.0  \nIt IS NOT possible to assign one license to a directory and override that assignment or a single file within that directory, NOR IS it possible to use globs or regular expressions.",
            "title": "License metadata"
        },
        {
            "location": "/spec/#extension-metadata",
            "text": "If an extension of the specification is used, it MUST be put into a list under the root-level node  extensions .  ---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nextensions:\n  - extension_name_1\n  - \"yet another extension\"  This list SHOULD be used by implementations that support these extensions to comply with validation checks or processes as defined by the extensions.  If an implementation encounters an unsupported extension it MUST issue a user level warning.  If an implementation supports an extension it MUST use default settings, for example for control commands, as defined in the extension.  If an extension creates additional (custom) metadata fields, they MUST NOT interfere with the structure defined in this document.\nHowever, it is unspecified into which root node or nodes of the ERC configuration file these metadata should go.",
            "title": "Extension metadata"
        },
        {
            "location": "/spec/#comprehensive-example-of-ercyml",
            "text": "The following example shows all possible fields of the core specification with example values.  id: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nstructure:\n  payload_directory: \"data\" # folder name including the workspace, after using bagger  \n  config_file: \"erc.yml\"\n  container_file: \"image.tar\"\n  container_manifest: \"Dockerfile\"\nexecution:\n  mountpoint: \"/erc\" # name of the volume used in the Dockerfile\n  command: \"Rscript -e 'rmarkdown::render(input = \\\"paper.Rmd\\\", output_format = \\\"html\\\")'\"\nlicenses: # licenses that the author chooses for their files\n  code:\n    others_lib.bin: MIT\n    my_code.c: GPL-3.0\n  text:\n    README.md: CC0-1.0\n    paper/chapter01.doc: CC-BY-4.0\n    paper/chapter02.tex: CC-BY-4.0\nextensions:\n  - extension_name_1\n  - \"yet another extension\"  The path to the ERC configuration file subsequently MUST be  <path-to-bag>/data/erc.yml .",
            "title": "Comprehensive example of erc.yml"
        },
        {
            "location": "/spec/#ercignore-file",
            "text": "The ERC MAY contain a file named  .ercignore  in the base directory.\nIf this file is present, any files and directories within the outer container which match the patterns within the file  .ercignore  will be excluded from the validation process.\nThe newline-separated patterns in the file MUST be  Unix shell globs .  The following  media types  (see  IANA's full list of media types ) are regular expressions of file formats that CAN be used:   text/*  application/json  *+xml  *+json",
            "title": ".ercignore file"
        },
        {
            "location": "/spec/#content-metadata",
            "text": "",
            "title": "Content metadata"
        },
        {
            "location": "/spec/#metadata-elements-under-development",
            "text": "Current JSON dummy to visualise the properties. It SHOULD be filled out as good as possible.  {\n    \"author\": [{\n        \"name\": null,\n        \"affiliation\": [],\n        \"orcid\": null\n    }],\n    \"community\": \"o2r\",\n    \"depends\": [{\n        \"identifier\": null,\n        \"version\": null,\n        \"packageSystem\": null,\n    }],\n    \"description\": null,\n    \"ercIdentifier\": null,\n    \"file\": {\n        \"filename\": null,\n        \"filepath\": null,\n        \"mimetype\": null\n    },\n    \"generatedBy\": null,\n    \"interaction\": {\n        \"interactive\": false\n    },\n    \"keywords\": [],\n    \"license\": null,\n    \"paperLanguage\": [],\n    \"paperSource\": null,\n    \"publicationDate\": null,\n    \"recordDateCreated\": null,\n    \"softwarePaperCitation\": null,\n    \"spatial\": {\n        \"files\": [],\n        \"union\": []\n    },\n    \"temporal\": {\n        \"begin\": null,\n        \"end\": null\n    },\n    \"title\": null\n}  The path to the o2r metadata file MUST be  <path-to-bag>/data/metadata.json .",
            "title": "Metadata elements under development"
        },
        {
            "location": "/spec/#description-of-metadata-properties",
            "text": "Defining explanations on the concept of each metadata element in use.   author  Contains a list of author related information.  author.affiliation  A list of institutions, organizations or other groups that the creator of the asset is associated with.  author.name  The name of the human individual, institution, organization, machine or other entity that acts as creator of the asset.  author.orcid  the ORCid of the creator of the asset.  community  Indicates belonging to a scientific community, e.g. on a repositoy platform.  depends  A block for each entity that the software is dependent on for execution.  depends.identifier  An identifying name for the depending package.  depends.version  The computer software and hardware required to run the software.  depends.packageSystem  The package manager system that makes the dependency entity available.  description  A text representation conveying the purpose and scope of the asset (the abstract).  ercIdentifier  A universally unique character string associated with the asset as  executable research compendium , provided by the o2r service.  file  A block for the main source file for the metadata (e.g. rmd file), generated and used by the o2r service.  file.filename  see above   file.filepath  see above   file.mimetype  see above   generatedBy  The entity, person or tool, that created the software.  interaction  Information on how to interact with the asset.  interaction.interactive  indicates interaction such as shiny app dynamics is possible.  keywords  Tags associated with the asset.  license  License information for the entire ERC.  paperLanguage  A list of language codes that indicate the language of the asset, e.g.  en .  paperSource  The text document file of the paper.  publicationDate  The publication date of the paper publication.  recordDateCreated  The date that this metadata record was created.  softwarePaperCitation  A text string that can be used to authoritatively cite a research paper, conference proceedings or other scholarly work that describes the design, development, usage, significance or other aspect of the software.  spatial  Information about the geometric bounding box of the underlying data/software.  spatial.files  A Geojson object of the aggregated bounding boxes of the underlying data/software, generated by the o2r service.  spatial.union  A Geojson object displaying the spatial properties of the data.  temporal  Aggregated information about the relevant time period of the underlying data sets.  temporal.begin  The starting point of the relevant time period.  temporal.end  The end point of the relevant time period.  title  The distinguishing name of the paper publication.",
            "title": "Description of metadata properties"
        },
        {
            "location": "/spec/#validation",
            "text": "ERC validation comprises four steps:   checking required metadata elements  executing the runtime container  comparing the output files of the runtime container execution with the original output files in the outer container    The validation MUST NOT fail when files listed in  .ercignore  are failing comparison.  The validation SHOULD communicate all files and directories actually used for validation to the user to avoid malicious usage of an  .ercignore  file.",
            "title": "Validation"
        },
        {
            "location": "/spec/#security-considerations",
            "text": "Why are ERC not a security risk?   the spec prohibits use of  EXPOSE  the containers are only executed  without  external network access using  Network: none , see  Docker CLI run documentation",
            "title": "Security considerations"
        },
        {
            "location": "/spec/docker/",
            "text": "Docker runtime extension\n\n\nThis extension uses \nDocker\n to define, build, and store the runtime environment.\n\n\nThe runtime environment or image MUST be represented by a \nDocker image v1.2.0\n.\n\n\nThe runtime manifest MUST be represented by a \nDockerfile\n, see \nDocker builder reference\n, as defined in version \n1.12.x\n.\n\n\nDockerfile\n\n\nThe base directory MUST contain a valid Dockerfile, see \nDockerfile reference\n.\nThe Dockerfile MUST contain the build instructions for the runtime environment and MUST have been used to create the image saved to the \nruntime container file\n using \ndocker build\n, see \nDocker CLI build command documentation\n, as defined in version \n1.12.x\n.\nThe build SHOULD be done with the option \n--no-cache=true\n.\n\n\nThe file SHOULD be named \nDockerfile\n.\nDiffering file names MUST be specified in the extension metadata, the exact node is left implementation-specific.\n\n\nThe Dockerfile MUST contain the required instruction \nFROM\n, which MUST NOT use the \nlatest\n tag.\n\n\nThe Dockerfile SHOULD contain the instruction \nMAINTAINER\n to provide copyright information.\n\n\nThe Dockerfile MUST have an active instruction \nCMD\n, or a combination of the instructions \nENTRYPOINT\n and \nCMD\n, which executes the packaged analysis.\n\n\nThe Dockerfile MUST NOT contain \nEXPOSE\n instructions.\n\n\nThe Dockerfile MUST contain a \nVOLUME\n instruction to define the mount point of the ERC within the container.\nThis mountpoint SHOULD be \n/erc\n.\nIf the mountpoint is different from \n/erc\n, the value MUST be defined in \nerc.yml\n in a node \nexecution.mountpoint\n.\n\n\nExample for the mountpoint configuration:\n\n\n---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nexecution:\n  mountpoint: \"/erc\"\n\n\n\n\nExample for a Dockerfile:\n\n\nFROM rocker/r-base:latest\nMAINTAINER o2r\n\nRUN apt-get update -qq \\\n    && apt-get install -y --no-install-recommends \\\n    ## Packages required by R extension packages\n    # required by rmarkdown:\n    lmodern \\\n    pandoc \\\n    # for devtools (requires git2r, httr):\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    git \\\n    # for udunits:\n    libudunits2-0 \\\n    libudunits2-dev \\\n    # required when knitting the document\n    pandoc-citeproc \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# install R extension packages\nRUN install2.r -r \"http://cran.rstudio.com\" \\\n      rmarkdown \\\n      ggplot2 \\\n      devtools \\\n      && rm -rf /tmp/downloaded_packages/ /tmp/*.rd\n\n# Save installed packages to file\nRUN dpkg -l > /dpkg-list.txt\n\nLABEL Description=\"This is an ERC image.\" \\\n    info.o2r.bag.id=\"123456\"\n\nCOPY . /erc\n\nVOLUME [\"/erc\"]\n\nENTRYPOINT [\"sh\", \"-c\"]\nCMD [\"R --vanilla -e \\\"rmarkdown::render(input = '/erc/myPaper.rmd', output_dir = '/erc', output_format = rmarkdown::html_document())\\\"\"]\n\n\n\n\nSee also: \nBest practices for writing Dockerfiles\n.\n\n\nDocker container\n\n\nTo export the docker container and inspect its filesystem use:\n\n\ndocker export CONTAINER_ID > myExport.tar\n\n\nDocker image\n\n\nThe base directory MUST contain a \ntarball\n of a Docker image as created be the command \ndocker save\n, see \nDocker CLI save command documentation\n, as defined in version \n1.12.x\n.\n\n\nThe file SHOULD be named \nimage.tar\n.\n\n\nThe output of the container during execution can be shown to the user to convey detailed information.\n\n\nDefault control statements\n\n\nThe default control statements of implementing tools MUST be as shown in the following example configuration file.\n\n\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nversion: 1\nexecution:\n  command:\n    - `docker load --input image.tar`\n    - `docker run -it -e TZ=CET erc:b9b0099e-9f8d-4a33-8acf-cb0c062efaec`",
            "title": "Docker Runtime Extension"
        },
        {
            "location": "/spec/docker/#docker-runtime-extension",
            "text": "This extension uses  Docker  to define, build, and store the runtime environment.  The runtime environment or image MUST be represented by a  Docker image v1.2.0 .  The runtime manifest MUST be represented by a  Dockerfile , see  Docker builder reference , as defined in version  1.12.x .",
            "title": "Docker runtime extension"
        },
        {
            "location": "/spec/docker/#dockerfile",
            "text": "The base directory MUST contain a valid Dockerfile, see  Dockerfile reference .\nThe Dockerfile MUST contain the build instructions for the runtime environment and MUST have been used to create the image saved to the  runtime container file  using  docker build , see  Docker CLI build command documentation , as defined in version  1.12.x .\nThe build SHOULD be done with the option  --no-cache=true .  The file SHOULD be named  Dockerfile .\nDiffering file names MUST be specified in the extension metadata, the exact node is left implementation-specific.  The Dockerfile MUST contain the required instruction  FROM , which MUST NOT use the  latest  tag.  The Dockerfile SHOULD contain the instruction  MAINTAINER  to provide copyright information.  The Dockerfile MUST have an active instruction  CMD , or a combination of the instructions  ENTRYPOINT  and  CMD , which executes the packaged analysis.  The Dockerfile MUST NOT contain  EXPOSE  instructions.  The Dockerfile MUST contain a  VOLUME  instruction to define the mount point of the ERC within the container.\nThis mountpoint SHOULD be  /erc .\nIf the mountpoint is different from  /erc , the value MUST be defined in  erc.yml  in a node  execution.mountpoint .  Example for the mountpoint configuration:  ---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nexecution:\n  mountpoint: \"/erc\"  Example for a Dockerfile:  FROM rocker/r-base:latest\nMAINTAINER o2r\n\nRUN apt-get update -qq \\\n    && apt-get install -y --no-install-recommends \\\n    ## Packages required by R extension packages\n    # required by rmarkdown:\n    lmodern \\\n    pandoc \\\n    # for devtools (requires git2r, httr):\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    git \\\n    # for udunits:\n    libudunits2-0 \\\n    libudunits2-dev \\\n    # required when knitting the document\n    pandoc-citeproc \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# install R extension packages\nRUN install2.r -r \"http://cran.rstudio.com\" \\\n      rmarkdown \\\n      ggplot2 \\\n      devtools \\\n      && rm -rf /tmp/downloaded_packages/ /tmp/*.rd\n\n# Save installed packages to file\nRUN dpkg -l > /dpkg-list.txt\n\nLABEL Description=\"This is an ERC image.\" \\\n    info.o2r.bag.id=\"123456\"\n\nCOPY . /erc\n\nVOLUME [\"/erc\"]\n\nENTRYPOINT [\"sh\", \"-c\"]\nCMD [\"R --vanilla -e \\\"rmarkdown::render(input = '/erc/myPaper.rmd', output_dir = '/erc', output_format = rmarkdown::html_document())\\\"\"]  See also:  Best practices for writing Dockerfiles .",
            "title": "Dockerfile"
        },
        {
            "location": "/spec/docker/#docker-container",
            "text": "To export the docker container and inspect its filesystem use:  docker export CONTAINER_ID > myExport.tar",
            "title": "Docker container"
        },
        {
            "location": "/spec/docker/#docker-image",
            "text": "The base directory MUST contain a  tarball  of a Docker image as created be the command  docker save , see  Docker CLI save command documentation , as defined in version  1.12.x .  The file SHOULD be named  image.tar .  The output of the container during execution can be shown to the user to convey detailed information.",
            "title": "Docker image"
        },
        {
            "location": "/spec/docker/#default-control-statements",
            "text": "The default control statements of implementing tools MUST be as shown in the following example configuration file.  id: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nversion: 1\nexecution:\n  command:\n    - `docker load --input image.tar`\n    - `docker run -it -e TZ=CET erc:b9b0099e-9f8d-4a33-8acf-cb0c062efaec`",
            "title": "Default control statements"
        },
        {
            "location": "/spec/archival/",
            "text": "Archival extension\n\n\nThis extension places the ERC in the context of preservation workflows by defining structural information and other metadata that guarantee interpretability and enable the bundling of the complete ERC as a self-contained, archivable digital object.\n\n\nArchival bundle\n\n\nIn order to bundle the complete ERC, it can be packaged using the \nBagIt\n standard. This allows to store and transfer arbitrary content along with minimal metadata as well as checksum based payload validation.\n\n\nFor the purpose of transferring and storing an ERC, this extension defines how an ERC can be packaged using BagIt as the outer container and what limitations may apply.\n\n\nThe remainder of this section comprises (i) a description of the outer container, and (ii) a BagIt profile.\n\n\nBagIt outer container\n\n\nThe ERC base directory MUST be the BagIt payload directory \ndata/\n.\nThe path to the ERC configuration file subsequently MUST be \n<path-to-bag>/data/erc.yml\n.\n\n\nThe bag metadata file \nbag-info.txt\n MUST contain a metadata element of the label \nERC-Version\n and the version of the ERC payload as value.\n\n\nPayload-Oxum: 2172457623.43\nBagging-Date: 2016-02-01\nBag-Size: 2 GB\nERC-Version: 1\n\n\n\n\nExample file tree for a bagged ERC:\n\n\n\u251c\u2500\u2500 bag-info.txt\n\u251c\u2500\u2500 bagit.txt\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-17-sf2.Rmd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 erc.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 image.tar\n\u251c\u2500\u2500 manifest-md5.txt\n\u2514\u2500\u2500 tagmanifest-md5.txt\n\n\n\n\nBagIt profile - \nUnder Development\n\n\nA \nBagit Profile\n as outlined below could make the requirements of this extension more explicit.\n\n\n{\n     \"BagIt-Profile-Info\":{\n      \"BagIt-Profile-Identifier\":\"http://o2r.info/erc-bagit-v1.json\",\n      \"Source-Organization\":\"o2r.info\",\n      \"Contact-Name\":\"o2r Team\",\n      \"Contact-Email\":\"o2r@uni-muenster.de\",\n      \"External-Description\":\"BagIt profile for packaging executable research compendia.\",\n      \"Version\":\"1\"\n   },\n   \"Bag-Info\":{\n      \"Contact-Name\":{\n         \"required\":true\n      },\n      \"Contact-Email\":{\n         \"required\":true\n      },\n      \"External-Identifier\":{\n         \"required\":true\n      },\n      \"Bag-Size\":{\n         \"required\":true\n      },\n      \"Payload-Oxum\":{\n         \"required\":true\n      }\n   },\n   \"Manifests-Required\":[\n      \"md5\"\n   ],\n   \"Allow-Fetch.txt\":false,\n   \"Serialization\":\"optional\",\n   \"Accept-Serialization\":[\n      \"application/zip\"\n   ],\n   \"Tag-Manifests-Required\":[\n     \"md5\"\n   ],\n   \"Tag-Files-Required\":[\n      \".erc/metadata.json\",\n      \".erc.yml\"\n   ],\n   \"Accept-BagIt-Version\":[\n      \"0.96\"\n   ]\n}\n\n\n\n\nERC preservation aspects in the light of OAIS\n\n\nThe Open Archival Information System (OAIS) reference model is a framework for the preservation and dissimination of digital objects (assets). It has been created by the Consultative Committee for Space Data Systems (CCSDS) and  has since been adopted by a wide range of international institutions. The OAIS provides the terminology and concept of the \ninformation package\n as primitive of the digital preservation workflow. Submission information packages (SIP), Dissimination information packages (DIP) and Archival information packages (AIP) refer to different functional roles of a digital object during (long term) preservation.\n\n\nThe representation information object within OAIS consists of structural and semantic information and is itself linked to other units of representation information, building a representation network. The information contained within the ERC and its metadata serves as representation information and enables the interpretability of the archived software, environment, code, data, text and UI bindings. Standards used for representation are included as local copy of the underlying schema and as reference to their persistent identifiers. The network of information objects describes how the parts of the ERC relate to each other and how they are to be used and understood.\n\n\nReferences\n\n\n\n\nCCSDS (2012): RECOMMENDED PRACTICE FOR AN OAIS REFERENCE MODEL. CCSDS 650.0-M-2 (Magenta Book). http://public.ccsds.org/publications/archive/650x0m2.pdf\n\n\nMaack, M.N. (2015). The Open Archival Information System (oais) Reference Model.\n\n\n\n\nSecondary metadata files\n\n\nThe ERC as an object can be used in a broad range of cases. For example, it can be an item under review during a journal publication, it can be the actual publication at a workshop or conference or it can be a preserved item in a digital archive. All of these have their own standards and requirements to apply, when it comes to metadata.\n\n\n~~These metadata requirements \nare not\n part of this specification, but~~ the following conventions are made to simplify and coordinate the variety.\n\n\nMetadata specific to a particular domain or use case MUST replicate the information required for the specific case in an independent file.\nDomain metadata SHOULD follow domain conventions and standards regarding format and encoding of metadata.\nDuplicate information is accepted, because it lowers the entry barrier for domain experts and systems, who can simply pick up a metadata copy in a format known to them.\n\n\nMetadata documents of specific use cases MUST be stored in a directory \n.erc\n, which is a child-directory of the ERC base directory.\n\n\nMetadata documents SHOULD be named according to the used standard or platform, and the used format respectively encoding, e.g. \ndatacite40.xml\n or \nzenodo_sandbox10.json\n, and SHOULD use a suitable mime type.\n\n\nRequirements of secondary metadata\n\n\nIn order to comply to their governing schemas, secondary metadata must include the mandatory information as set by 3rd party services. While the documentation of this quality is a perpetual task, we have gathered the information most relevant our selection of connected services.\n\n\nZenodo\n\n\n\n\nAccepts metadata as json.\n\n\nMandatory elements:\n\n\nUpload Type (e.g. Publication)\n\n\nPublication Type\n\n\nTitle\n\n\nCreators\n\n\nDescription\n\n\nPublication Date\n\n\nAccess Right\n\n\nLicense\n\n\n\n\n\n\n\n\nDataCite (4.0)\n\n\n\n\nAccepts metadata as xml.\n\n\nMandatory elements:\n\n\nIdentifier\n\n\nCreator\n\n\nTitle\n\n\nPublisher\n\n\nPublication Year\n\n\nRessource Type\n\n\n\n\n\n\n\n\nOther third party standards that will be considered comprise: \nCodeMeta\n, \nEuDat\n, \nmets/mods\n.",
            "title": "Archival Extension"
        },
        {
            "location": "/spec/archival/#archival-extension",
            "text": "This extension places the ERC in the context of preservation workflows by defining structural information and other metadata that guarantee interpretability and enable the bundling of the complete ERC as a self-contained, archivable digital object.",
            "title": "Archival extension"
        },
        {
            "location": "/spec/archival/#archival-bundle",
            "text": "In order to bundle the complete ERC, it can be packaged using the  BagIt  standard. This allows to store and transfer arbitrary content along with minimal metadata as well as checksum based payload validation.  For the purpose of transferring and storing an ERC, this extension defines how an ERC can be packaged using BagIt as the outer container and what limitations may apply.  The remainder of this section comprises (i) a description of the outer container, and (ii) a BagIt profile.",
            "title": "Archival bundle"
        },
        {
            "location": "/spec/archival/#bagit-outer-container",
            "text": "The ERC base directory MUST be the BagIt payload directory  data/ .\nThe path to the ERC configuration file subsequently MUST be  <path-to-bag>/data/erc.yml .  The bag metadata file  bag-info.txt  MUST contain a metadata element of the label  ERC-Version  and the version of the ERC payload as value.  Payload-Oxum: 2172457623.43\nBagging-Date: 2016-02-01\nBag-Size: 2 GB\nERC-Version: 1  Example file tree for a bagged ERC:  \u251c\u2500\u2500 bag-info.txt\n\u251c\u2500\u2500 bagit.txt\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-17-sf2.Rmd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 erc.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 image.tar\n\u251c\u2500\u2500 manifest-md5.txt\n\u2514\u2500\u2500 tagmanifest-md5.txt",
            "title": "BagIt outer container"
        },
        {
            "location": "/spec/archival/#bagit-profile-under-development",
            "text": "A  Bagit Profile  as outlined below could make the requirements of this extension more explicit.  {\n     \"BagIt-Profile-Info\":{\n      \"BagIt-Profile-Identifier\":\"http://o2r.info/erc-bagit-v1.json\",\n      \"Source-Organization\":\"o2r.info\",\n      \"Contact-Name\":\"o2r Team\",\n      \"Contact-Email\":\"o2r@uni-muenster.de\",\n      \"External-Description\":\"BagIt profile for packaging executable research compendia.\",\n      \"Version\":\"1\"\n   },\n   \"Bag-Info\":{\n      \"Contact-Name\":{\n         \"required\":true\n      },\n      \"Contact-Email\":{\n         \"required\":true\n      },\n      \"External-Identifier\":{\n         \"required\":true\n      },\n      \"Bag-Size\":{\n         \"required\":true\n      },\n      \"Payload-Oxum\":{\n         \"required\":true\n      }\n   },\n   \"Manifests-Required\":[\n      \"md5\"\n   ],\n   \"Allow-Fetch.txt\":false,\n   \"Serialization\":\"optional\",\n   \"Accept-Serialization\":[\n      \"application/zip\"\n   ],\n   \"Tag-Manifests-Required\":[\n     \"md5\"\n   ],\n   \"Tag-Files-Required\":[\n      \".erc/metadata.json\",\n      \".erc.yml\"\n   ],\n   \"Accept-BagIt-Version\":[\n      \"0.96\"\n   ]\n}",
            "title": "BagIt profile - Under Development"
        },
        {
            "location": "/spec/archival/#erc-preservation-aspects-in-the-light-of-oais",
            "text": "The Open Archival Information System (OAIS) reference model is a framework for the preservation and dissimination of digital objects (assets). It has been created by the Consultative Committee for Space Data Systems (CCSDS) and  has since been adopted by a wide range of international institutions. The OAIS provides the terminology and concept of the  information package  as primitive of the digital preservation workflow. Submission information packages (SIP), Dissimination information packages (DIP) and Archival information packages (AIP) refer to different functional roles of a digital object during (long term) preservation.  The representation information object within OAIS consists of structural and semantic information and is itself linked to other units of representation information, building a representation network. The information contained within the ERC and its metadata serves as representation information and enables the interpretability of the archived software, environment, code, data, text and UI bindings. Standards used for representation are included as local copy of the underlying schema and as reference to their persistent identifiers. The network of information objects describes how the parts of the ERC relate to each other and how they are to be used and understood.  References   CCSDS (2012): RECOMMENDED PRACTICE FOR AN OAIS REFERENCE MODEL. CCSDS 650.0-M-2 (Magenta Book). http://public.ccsds.org/publications/archive/650x0m2.pdf  Maack, M.N. (2015). The Open Archival Information System (oais) Reference Model.",
            "title": "ERC preservation aspects in the light of OAIS"
        },
        {
            "location": "/spec/archival/#secondary-metadata-files",
            "text": "The ERC as an object can be used in a broad range of cases. For example, it can be an item under review during a journal publication, it can be the actual publication at a workshop or conference or it can be a preserved item in a digital archive. All of these have their own standards and requirements to apply, when it comes to metadata.  ~~These metadata requirements  are not  part of this specification, but~~ the following conventions are made to simplify and coordinate the variety.  Metadata specific to a particular domain or use case MUST replicate the information required for the specific case in an independent file.\nDomain metadata SHOULD follow domain conventions and standards regarding format and encoding of metadata.\nDuplicate information is accepted, because it lowers the entry barrier for domain experts and systems, who can simply pick up a metadata copy in a format known to them.  Metadata documents of specific use cases MUST be stored in a directory  .erc , which is a child-directory of the ERC base directory.  Metadata documents SHOULD be named according to the used standard or platform, and the used format respectively encoding, e.g.  datacite40.xml  or  zenodo_sandbox10.json , and SHOULD use a suitable mime type.",
            "title": "Secondary metadata files"
        },
        {
            "location": "/spec/archival/#requirements-of-secondary-metadata",
            "text": "In order to comply to their governing schemas, secondary metadata must include the mandatory information as set by 3rd party services. While the documentation of this quality is a perpetual task, we have gathered the information most relevant our selection of connected services.  Zenodo   Accepts metadata as json.  Mandatory elements:  Upload Type (e.g. Publication)  Publication Type  Title  Creators  Description  Publication Date  Access Right  License     DataCite (4.0)   Accepts metadata as xml.  Mandatory elements:  Identifier  Creator  Title  Publisher  Publication Year  Ressource Type     Other third party standards that will be considered comprise:  CodeMeta ,  EuDat ,  mets/mods .",
            "title": "Requirements of secondary metadata"
        },
        {
            "location": "/spec/valid/",
            "text": "ERC validation extension - \nUnder development\n\n\nThe \nbasic validation\n mechanism compares hashes of files where this is possible and ignores other files.\n\n\nThis extension goes beyond simple comparison and incorporates \"harder\" to compare files and what to do with them, e.g. plots/figures, PDFs, ...",
            "title": "Validation Extension"
        },
        {
            "location": "/spec/valid/#erc-validation-extension-under-development",
            "text": "The  basic validation  mechanism compares hashes of files where this is possible and ignores other files.  This extension goes beyond simple comparison and incorporates \"harder\" to compare files and what to do with them, e.g. plots/figures, PDFs, ...",
            "title": "ERC validation extension - Under development"
        },
        {
            "location": "/spec/r/",
            "text": "R extension\n\n\nHow to put R-based analyses in an ERC.\n\n\nStructure\n\n\nThe structure within the ERC contents directory are intentionally unspecified.\nHowever, the contents structure MAY follow conventions or be based on templates for organizing research artefacts.\nIf a convention is followed then it SHOULD be referenced in the ERC configuration file as a node \nconvention\n within the \nstructure\n section.\nThe node's value can be any text string which uniquely identifies a convention, but a URI or URL to either a human-readable description or technical specification is RECOMMENDED.\n\n\nA non-exhaustive list of potential conventions \nfor R\n is as follows:\n\n\n\n\nROpenSci rrrpkg\n\n\nJeff Hollister's manuscriptPackage\n\n\nCarl Boettiger's template\n\n\nFrancisco Rodriguez-Sanchez's template\n\n\n\n\n\n\nBen Marwick's template\n\n\n\n\nExample for using the ROPenSci rrrpkg convention:\n\n\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nstructure:\n  convention: https://github.com/ropensci/rrrpkg\n\n\n\n\nMain document\n\n\nThe ERC's main document as defined by this extension MUST be a weaved document, which integrates text and code and can be compiled into an interaction file.\n\n\nThe weaved document SHOULD have one of the following formats for executable documents and MUST use the respective name:\n\n\n\n\nRMarkdown\n with the name \npaper.Rmd\n\n\nSweave\n with the name \npaper.Rnw\n\n\n\n\nThe main document SHOULD NOT contain code that loads pre-computed results from files but conduct all analyses, even costly ones, during document weaving.\n\n\nRMarkdown\n\n\nThe document MUST NOT use \ncache=TRUE\n on any of the code chunks (see \nknitr\n options\n.\nWhile the previously cached files (\n.rdb\n and \n.rdx\n) may be included, they should not be used during the rendering of the document.\n\n\nSweave\n\n\nThe document MUST NOT use the \ncacheSweave\n package (\nit is archived anyway\n.\n\n\nFixing the environment in code\n\n\nThe time zone MUST be fixed to CET to allow validation of output times (potentially broken by different output formats).\n\n\nSys.setenv(\"TZ\" = \"CET\")\n\n\n\n\nInteraction file\n\n\nThe ERC MAY contain a document with interactive figures and control elements for interactive manipulation of the packaged computations.\n\n\nThe interaction file MUST have \nHTML\n format and SHOULD be valid \nHTML5\n.\n\n\nRuntime container\n\n\nThe manifest file (Dockerfile) MUST use \nR --vanilla\n.\n\n\nhttp://kbroman.org/knitr_knutshell/pages/reproducible.html",
            "title": "R Extension"
        },
        {
            "location": "/spec/r/#r-extension",
            "text": "How to put R-based analyses in an ERC.",
            "title": "R extension"
        },
        {
            "location": "/spec/r/#structure",
            "text": "The structure within the ERC contents directory are intentionally unspecified.\nHowever, the contents structure MAY follow conventions or be based on templates for organizing research artefacts.\nIf a convention is followed then it SHOULD be referenced in the ERC configuration file as a node  convention  within the  structure  section.\nThe node's value can be any text string which uniquely identifies a convention, but a URI or URL to either a human-readable description or technical specification is RECOMMENDED.  A non-exhaustive list of potential conventions  for R  is as follows:   ROpenSci rrrpkg  Jeff Hollister's manuscriptPackage  Carl Boettiger's template  Francisco Rodriguez-Sanchez's template    Ben Marwick's template   Example for using the ROPenSci rrrpkg convention:  id: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nstructure:\n  convention: https://github.com/ropensci/rrrpkg",
            "title": "Structure"
        },
        {
            "location": "/spec/r/#main-document",
            "text": "The ERC's main document as defined by this extension MUST be a weaved document, which integrates text and code and can be compiled into an interaction file.  The weaved document SHOULD have one of the following formats for executable documents and MUST use the respective name:   RMarkdown  with the name  paper.Rmd  Sweave  with the name  paper.Rnw   The main document SHOULD NOT contain code that loads pre-computed results from files but conduct all analyses, even costly ones, during document weaving.",
            "title": "Main document"
        },
        {
            "location": "/spec/r/#rmarkdown",
            "text": "The document MUST NOT use  cache=TRUE  on any of the code chunks (see  knitr  options .\nWhile the previously cached files ( .rdb  and  .rdx ) may be included, they should not be used during the rendering of the document.",
            "title": "RMarkdown"
        },
        {
            "location": "/spec/r/#sweave",
            "text": "The document MUST NOT use the  cacheSweave  package ( it is archived anyway .",
            "title": "Sweave"
        },
        {
            "location": "/spec/r/#fixing-the-environment-in-code",
            "text": "The time zone MUST be fixed to CET to allow validation of output times (potentially broken by different output formats).  Sys.setenv(\"TZ\" = \"CET\")",
            "title": "Fixing the environment in code"
        },
        {
            "location": "/spec/r/#interaction-file",
            "text": "The ERC MAY contain a document with interactive figures and control elements for interactive manipulation of the packaged computations.  The interaction file MUST have  HTML  format and SHOULD be valid  HTML5 .",
            "title": "Interaction file"
        },
        {
            "location": "/spec/r/#runtime-container",
            "text": "The manifest file (Dockerfile) MUST use  R --vanilla .  http://kbroman.org/knitr_knutshell/pages/reproducible.html",
            "title": "Runtime container"
        },
        {
            "location": "/spec/man/",
            "text": "Manipulation extension\n\n\nUI bindings\n\n\nHow is the user interface defined?\n\n\nUsing other data\n\n\nDefine in \nerc.yml\n which files are potential input data which can be exchanged.\n\n\nid: adcd\nmanipulate:\n    input_data:\n        - filename: are.json\n          format: geojson\n        - filename: rs.tiff\n          format: geotiff\n\n\n\n\nThen: How is external data mounted into the container and where to (what are the paths)?\n\n\nValidation\n\n\nHow are UI bindings validated/checked?",
            "title": "Manipulation Extension"
        },
        {
            "location": "/spec/man/#manipulation-extension",
            "text": "",
            "title": "Manipulation extension"
        },
        {
            "location": "/spec/man/#ui-bindings",
            "text": "How is the user interface defined?",
            "title": "UI bindings"
        },
        {
            "location": "/spec/man/#using-other-data",
            "text": "Define in  erc.yml  which files are potential input data which can be exchanged.  id: adcd\nmanipulate:\n    input_data:\n        - filename: are.json\n          format: geojson\n        - filename: rs.tiff\n          format: geotiff  Then: How is external data mounted into the container and where to (what are the paths)?",
            "title": "Using other data"
        },
        {
            "location": "/spec/man/#validation",
            "text": "How are UI bindings validated/checked?",
            "title": "Validation"
        },
        {
            "location": "/spec/plain_r/",
            "text": "Plain R runtime extension\n\n\nThe runtime manifest is a codemeta document, and the runtime environment is created outside of a container.",
            "title": "Plain R Runtime Extension"
        },
        {
            "location": "/spec/plain_r/#plain-r-runtime-extension",
            "text": "The runtime manifest is a codemeta document, and the runtime environment is created outside of a container.",
            "title": "Plain R runtime extension"
        },
        {
            "location": "/user-guide/creation/",
            "text": "User guide: ERC creation\n\n\nThis user guide comprises instructions how to create an ERC \nby hand\n.\nIt is thus limited to mandatory elements in some places.\nHowever, a fundamental goal of the ERC specification is to be simple enough to allow manual ERC creation as demonstrated in this document.\nFor using tools or services for creation and validation of ERCs, please see the \ndeveloper guide\n.\n\n\n\nThis is a draft. If you have comments or suggestions please file them in the \nissue tracker\n. If you have explicit changes please fork the \ngit repo\n and submit a pull request.\n\n\n\n\nStep 1: create workspace\n\n\nDo your research and create something useful that works for you.\n\nThe ERC specification makes no restrictions on the contents of a workspace, but guidelines and best practices do exist and should be followed by users during their research i.e. even before packaging it in an ERC.\n\n\nCode and versioning\n\n\nIf the base directory contains a script file or source code used to conduct the packaged analysis, we recoomend this code is managed using \ndistributed version control\n, see \nsoftware carpentry guidelines\n.\nThe base directory should contain a copy of the complete repository in that case.\n\n\nWorkspace structure\n\n\nThe base directory contents should follow common guidelines to project organisation.\nSome useful resources are\n\n\n\n\nSoftware carpentry paper \"Good enough practices in Scientific Computing\"\n\n\nROpenSci research compendium\n).\n\n\nROpenSci reproducibility guide\n\n\n\n\nStep 2: create container for runtime\n\n\nTo create a working ERC you must include a complete environment description and an executable image.\n\n\nWe recommend using Docker, so a Dockerfile and a Docker container tarball, to achieve these goals.\n\n\nSee the \nDocker extension\n for detailed requirements, including links to the relevant Docker commands.\n\n\nStep 3: create metadata\n\n\nERC metadata\n\n\nStructural & administrative metadata must be put into the ERC configuration file \nerc.yml\n as defined in the \nspecification\n.\n\n\nLicense metadata\n\n\nPlease consult your employer or legal department for a suitable license for your work. Make sure you hold the copyright for any code that you want to release under a self-chosen license.\n\n\nFurther resources that are linked here without any endorsement or being checked:\n\n\n\n\nchoosealicense.com\n (for code)\n\n\nopendefinition.org\n (for code, data, text)\n\n\nA short lecture on Open Licensing by Lorena A. Barba\n\n\n\n\nLicense information must be put into the ERC configuration file \nerc.yml\n as defined in the \nspecification\n.\n\n\nContent metadata\n\n\nContent metadata are use for the later discovery of your work. Properties for the content metadata are defined in the \nspecification\n and must be put into the \nmetadata.json\n file.\n\n\n\n\n\nSecondary metadata\n\n\nAs of now, we do not recommend creating secondary metadata by hand.\n\n\nSecondary metadata are used for third party services, e.g. repositories that define their own obligatory metadata.\nIn general they can be added in different formats to support different use cases.\n\n\nMore information on secondary metadata can be found in the \narchival extention\n.\n\n\nStep 4: validate\n\n\nYou can use the container created in step 2 for validation purposes, too. Run the analysis in the container, then copy the analysis output to a temporary directory on the host system, and finally compare the original workspace and the temporary directory according the \nvalidation rules\n to ensure a complete replication.\n\n\n\n\n\nStep 5: create bag\n\n\nTo create a package that is suitable for being stored in an archive or repository, ERCs must be bundled as BagIt bags. Follow the instructions in the \narchival extension\n to create a bag for your work.\n\n\nUseful third party tools for creating and validating BagIt bags:\n\n\n\n\nBagger\n (Java-based, with UI)\n\n\nbagit-python\n (Python package)\n\n\n\n\nA file tree for the final bagged ERC may look like this:\n\n\n\u251c\u2500\u2500 bag-info.txt\n\u251c\u2500\u2500 bagit.txt\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-17-myPaper.Rmd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 erc.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 image.tar\n\u251c\u2500\u2500 manifest-md5.txt\n\u2514\u2500\u2500 tagmanifest-md5.txt",
            "title": "ERC creation guide"
        },
        {
            "location": "/user-guide/creation/#user-guide-erc-creation",
            "text": "This user guide comprises instructions how to create an ERC  by hand .\nIt is thus limited to mandatory elements in some places.\nHowever, a fundamental goal of the ERC specification is to be simple enough to allow manual ERC creation as demonstrated in this document.\nFor using tools or services for creation and validation of ERCs, please see the  developer guide .  \nThis is a draft. If you have comments or suggestions please file them in the  issue tracker . If you have explicit changes please fork the  git repo  and submit a pull request.",
            "title": "User guide: ERC creation"
        },
        {
            "location": "/user-guide/creation/#step-1-create-workspace",
            "text": "Do your research and create something useful that works for you. \nThe ERC specification makes no restrictions on the contents of a workspace, but guidelines and best practices do exist and should be followed by users during their research i.e. even before packaging it in an ERC.",
            "title": "Step 1: create workspace"
        },
        {
            "location": "/user-guide/creation/#code-and-versioning",
            "text": "If the base directory contains a script file or source code used to conduct the packaged analysis, we recoomend this code is managed using  distributed version control , see  software carpentry guidelines .\nThe base directory should contain a copy of the complete repository in that case.",
            "title": "Code and versioning"
        },
        {
            "location": "/user-guide/creation/#workspace-structure",
            "text": "The base directory contents should follow common guidelines to project organisation.\nSome useful resources are   Software carpentry paper \"Good enough practices in Scientific Computing\"  ROpenSci research compendium ).  ROpenSci reproducibility guide",
            "title": "Workspace structure"
        },
        {
            "location": "/user-guide/creation/#step-2-create-container-for-runtime",
            "text": "To create a working ERC you must include a complete environment description and an executable image.  We recommend using Docker, so a Dockerfile and a Docker container tarball, to achieve these goals.  See the  Docker extension  for detailed requirements, including links to the relevant Docker commands.",
            "title": "Step 2: create container for runtime"
        },
        {
            "location": "/user-guide/creation/#step-3-create-metadata",
            "text": "",
            "title": "Step 3: create metadata"
        },
        {
            "location": "/user-guide/creation/#erc-metadata",
            "text": "Structural & administrative metadata must be put into the ERC configuration file  erc.yml  as defined in the  specification .",
            "title": "ERC metadata"
        },
        {
            "location": "/user-guide/creation/#license-metadata",
            "text": "Please consult your employer or legal department for a suitable license for your work. Make sure you hold the copyright for any code that you want to release under a self-chosen license.  Further resources that are linked here without any endorsement or being checked:   choosealicense.com  (for code)  opendefinition.org  (for code, data, text)  A short lecture on Open Licensing by Lorena A. Barba   License information must be put into the ERC configuration file  erc.yml  as defined in the  specification .",
            "title": "License metadata"
        },
        {
            "location": "/user-guide/creation/#content-metadata",
            "text": "Content metadata are use for the later discovery of your work. Properties for the content metadata are defined in the  specification  and must be put into the  metadata.json  file.",
            "title": "Content metadata"
        },
        {
            "location": "/user-guide/creation/#secondary-metadata",
            "text": "As of now, we do not recommend creating secondary metadata by hand.  Secondary metadata are used for third party services, e.g. repositories that define their own obligatory metadata.\nIn general they can be added in different formats to support different use cases.  More information on secondary metadata can be found in the  archival extention .",
            "title": "Secondary metadata"
        },
        {
            "location": "/user-guide/creation/#step-4-validate",
            "text": "You can use the container created in step 2 for validation purposes, too. Run the analysis in the container, then copy the analysis output to a temporary directory on the host system, and finally compare the original workspace and the temporary directory according the  validation rules  to ensure a complete replication.",
            "title": "Step 4: validate"
        },
        {
            "location": "/user-guide/creation/#step-5-create-bag",
            "text": "To create a package that is suitable for being stored in an archive or repository, ERCs must be bundled as BagIt bags. Follow the instructions in the  archival extension  to create a bag for your work.  Useful third party tools for creating and validating BagIt bags:   Bagger  (Java-based, with UI)  bagit-python  (Python package)   A file tree for the final bagged ERC may look like this:  \u251c\u2500\u2500 bag-info.txt\n\u251c\u2500\u2500 bagit.txt\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-17-myPaper.Rmd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 erc.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 image.tar\n\u251c\u2500\u2500 manifest-md5.txt\n\u2514\u2500\u2500 tagmanifest-md5.txt",
            "title": "Step 5: create bag"
        },
        {
            "location": "/user-guide/template/",
            "text": "User guide: ERC template - WORK IN PROGRESS\n\n\nIf you want to create an ERC for your research already at the beginning, and not \"post-hoc\" after your research is complete, these templates can hopefully help.\nThey are divided into specific domains to be more concrete.\n\n\nGeoscience research in R\n\n\nFiles in this template\n\n\n\n\ndocument.md\n use RMarkdown, this is the main document\n\n\nerc.yml\n is template for the ERC configuration file with placeholders for all required fields\n\n\nDockerfile\n is a template Dockerfile with some commands you can re-use to make sure all packages and tools that you need are installed\n\n\n\n\nHeader template\n\n\nThe yaml header of the \ndocument.md\n file is the right place to enter your meta information right away from the start: Fill out the metadata fields, included in the template, as early in your personal workflow as possible and keep them up-to-date to prepare for the ERC creation progress. The metadata extractor of the o2r service will collect and prefer information from RMarkdown document headers.\n\n\n---\nauthor:\n  - name: Your Name\n    affiliation: Your affiliation\n    orcid: Your ORCid\n  - name: Your co-author's name\n    affiliation: Their affiliation\n    orcid: Their ORCid\ntitle: The title of your publication\nabstract:\n  A concise description of your publication\nkeywords: [lorem, ipsum, dolor, sit, amet]\ndate: 2017-01-13\nlicense: cc-by\n---\n\n\n\n\n\n\n\n\n\n\nFilename\n\n\nTemplate\n\n\nERC-Spec\n\n\n\n\n\n\n\n\n\n\n\n\ngeo_template.zip\n \nTBD\n\n\nGeoscience research in R\n\n\nV.1",
            "title": "ERC template"
        },
        {
            "location": "/user-guide/template/#user-guide-erc-template-work-in-progress",
            "text": "If you want to create an ERC for your research already at the beginning, and not \"post-hoc\" after your research is complete, these templates can hopefully help.\nThey are divided into specific domains to be more concrete.",
            "title": "User guide: ERC template - WORK IN PROGRESS"
        },
        {
            "location": "/user-guide/template/#geoscience-research-in-r",
            "text": "Files in this template   document.md  use RMarkdown, this is the main document  erc.yml  is template for the ERC configuration file with placeholders for all required fields  Dockerfile  is a template Dockerfile with some commands you can re-use to make sure all packages and tools that you need are installed",
            "title": "Geoscience research in R"
        },
        {
            "location": "/user-guide/template/#header-template",
            "text": "The yaml header of the  document.md  file is the right place to enter your meta information right away from the start: Fill out the metadata fields, included in the template, as early in your personal workflow as possible and keep them up-to-date to prepare for the ERC creation progress. The metadata extractor of the o2r service will collect and prefer information from RMarkdown document headers.  ---\nauthor:\n  - name: Your Name\n    affiliation: Your affiliation\n    orcid: Your ORCid\n  - name: Your co-author's name\n    affiliation: Their affiliation\n    orcid: Their ORCid\ntitle: The title of your publication\nabstract:\n  A concise description of your publication\nkeywords: [lorem, ipsum, dolor, sit, amet]\ndate: 2017-01-13\nlicense: cc-by\n---     Filename  Template  ERC-Spec       geo_template.zip   TBD  Geoscience research in R  V.1",
            "title": "Header template"
        },
        {
            "location": "/dev-guide/",
            "text": "ERC developer guide\n\n\nAn introduction to the ERC rational and the technology choices made within the project \nOpening Reproducible Research\n.\nThis documents is targeted at developers who wish to create tools for creating, validating, and consuming ERC.\n\n\n\nThis is a draft. If you have comments or suggestions please file them in the \nissue tracker\n. If you have explicit changes please fork the \ngit repo\n and submit a pull request.\n\n\n\n\nConvention over configuration\n\n\nWe want to create a directory structure with default file names and sensible defaults.\nThis way a typical research workspace should require only minimal configuration in 80% of the cases, while allowing to override each of the settings if need be and providing full customizability in the remaining 20%.\n\n\nFor example, the main command to compile the text manuscript in a bagtainer could be \nknitr::knit(\"<*>.Rmd\")\n, with \n<*>\n being replaced by name of the first RMarkdown file.\nHowever, if a user wants to use \nrmarkdown::render(..)\n on a file named \npublication.md\n, then the default behaviour can be overwritten.\n\n\nReasoning and decisions\n\n\nSome observations\n\n\n\n\nresearchers do their thing and need independence/flexibility, so post-hoc creation will probably be most common and ERC must have low to no impact on workflow\n\n\ndata storage, citation and preservation is solved (repos, bitstream preservation in archives)\n\n\npackaging methods/methodology is solved (R packages, Python packages, ...)\n\n\nsoftware preservation is \nnot\n solved (methods are there, like migration, emulation, but complexity is too high to do this at high granularity)\n\n\nreproducible paper is solved (literate programming, R package dependency handling solutions, ..)\n\n\ncomputational RR requires sandboxing (to make sure everything is there as much as security)\n\n\na service is needed to create ERC for researchers and executes them in a controlled environment\n\n\n\n\nWhy nested containers\n\n\nA user shall have access to the files without starting the runtime container.\nTherefore we have at least two items, so we have a bundle and need an outer container.\nAs a bonus, the outer container can immediately be used to make an ERC conform to specific use cases, such as long term archival.\n\n\nThe alternative of putting everything into the container itself (e.g. using image labels for metadata) can be evaluated in the future.\n\n\nWhy is the runtime image not mandatory\n\n\nWhile having Docker in mind when writing the specification, an alternative idea always was to use the extension mechanisms of a given language environment, e.g. R, only to re-construct the runtime environment.\nThat is why the image is not mandatory.\n\n\nWhy BagIt\n\n\n...\n\n\nWhy Docker\n\n\n...\n\n\nLicensing information\n\n\nWithout proper license credits, the contents of an ERC would be useless based on today's copyright laws.\nTherefore we rather have the extra work for authors to define a license than to create something that is unusable by others.\n\n\nOne of the biggest issues is the \nscope of licenses\n, namely what to do about having multiple pieces of code, text, or data with different licenses.\n\n\nPut the identifier into the ERC\n\n\n\n\nmakes it easier to track across platforms\n\n\nis harder for manual creation\n\n\n\n\nWhy use bash\n\n\n\n\n\"What's oldest lasts longest.\" \nvia\n\n\n\n\nWhy is validation happening outside the container and not \nin\n the container\n\n\n\n\nbetter user experience (otherwise all info must be transported via stdout)\n\n\nto be sure nothing is manipulated within the validation script\n\n\n\n\no2r Platform\n\n\nThe software developed by the o2r project is the sole implementation of the ERC specification and hence a kind of reference implementation albeit being at a prototypical stage.\n\n\nWeb API\n\n\no2r Web API specification\n\n\nArchitecture\n\n\no2r Architecture documentation",
            "title": "Developer guide"
        },
        {
            "location": "/dev-guide/#erc-developer-guide",
            "text": "An introduction to the ERC rational and the technology choices made within the project  Opening Reproducible Research .\nThis documents is targeted at developers who wish to create tools for creating, validating, and consuming ERC.  \nThis is a draft. If you have comments or suggestions please file them in the  issue tracker . If you have explicit changes please fork the  git repo  and submit a pull request.",
            "title": "ERC developer guide"
        },
        {
            "location": "/dev-guide/#convention-over-configuration",
            "text": "We want to create a directory structure with default file names and sensible defaults.\nThis way a typical research workspace should require only minimal configuration in 80% of the cases, while allowing to override each of the settings if need be and providing full customizability in the remaining 20%.  For example, the main command to compile the text manuscript in a bagtainer could be  knitr::knit(\"<*>.Rmd\") , with  <*>  being replaced by name of the first RMarkdown file.\nHowever, if a user wants to use  rmarkdown::render(..)  on a file named  publication.md , then the default behaviour can be overwritten.",
            "title": "Convention over configuration"
        },
        {
            "location": "/dev-guide/#reasoning-and-decisions",
            "text": "",
            "title": "Reasoning and decisions"
        },
        {
            "location": "/dev-guide/#some-observations",
            "text": "researchers do their thing and need independence/flexibility, so post-hoc creation will probably be most common and ERC must have low to no impact on workflow  data storage, citation and preservation is solved (repos, bitstream preservation in archives)  packaging methods/methodology is solved (R packages, Python packages, ...)  software preservation is  not  solved (methods are there, like migration, emulation, but complexity is too high to do this at high granularity)  reproducible paper is solved (literate programming, R package dependency handling solutions, ..)  computational RR requires sandboxing (to make sure everything is there as much as security)  a service is needed to create ERC for researchers and executes them in a controlled environment",
            "title": "Some observations"
        },
        {
            "location": "/dev-guide/#why-nested-containers",
            "text": "A user shall have access to the files without starting the runtime container.\nTherefore we have at least two items, so we have a bundle and need an outer container.\nAs a bonus, the outer container can immediately be used to make an ERC conform to specific use cases, such as long term archival.  The alternative of putting everything into the container itself (e.g. using image labels for metadata) can be evaluated in the future.",
            "title": "Why nested containers"
        },
        {
            "location": "/dev-guide/#why-is-the-runtime-image-not-mandatory",
            "text": "While having Docker in mind when writing the specification, an alternative idea always was to use the extension mechanisms of a given language environment, e.g. R, only to re-construct the runtime environment.\nThat is why the image is not mandatory.",
            "title": "Why is the runtime image not mandatory"
        },
        {
            "location": "/dev-guide/#why-bagit",
            "text": "...",
            "title": "Why BagIt"
        },
        {
            "location": "/dev-guide/#why-docker",
            "text": "...",
            "title": "Why Docker"
        },
        {
            "location": "/dev-guide/#licensing-information",
            "text": "Without proper license credits, the contents of an ERC would be useless based on today's copyright laws.\nTherefore we rather have the extra work for authors to define a license than to create something that is unusable by others.  One of the biggest issues is the  scope of licenses , namely what to do about having multiple pieces of code, text, or data with different licenses.",
            "title": "Licensing information"
        },
        {
            "location": "/dev-guide/#put-the-identifier-into-the-erc",
            "text": "makes it easier to track across platforms  is harder for manual creation",
            "title": "Put the identifier into the ERC"
        },
        {
            "location": "/dev-guide/#why-use-bash",
            "text": "\"What's oldest lasts longest.\"  via",
            "title": "Why use bash"
        },
        {
            "location": "/dev-guide/#why-is-validation-happening-outside-the-container-and-not-in-the-container",
            "text": "better user experience (otherwise all info must be transported via stdout)  to be sure nothing is manipulated within the validation script",
            "title": "Why is validation happening outside the container and not in the container"
        },
        {
            "location": "/dev-guide/#o2r-platform",
            "text": "The software developed by the o2r project is the sole implementation of the ERC specification and hence a kind of reference implementation albeit being at a prototypical stage.",
            "title": "o2r Platform"
        },
        {
            "location": "/dev-guide/#web-api",
            "text": "o2r Web API specification",
            "title": "Web API"
        },
        {
            "location": "/dev-guide/#architecture",
            "text": "o2r Architecture documentation",
            "title": "Architecture"
        },
        {
            "location": "/glossary/",
            "text": "Glossary\n\n\n(Computational) Analysis\n\n\nA scientific workflow that is to be preserved in an ERC. It conducts a number of operations on data and generates an output (text, numbers, plots).\n\n\nBag\n\n\nSee \nBagIt specification\n.\n\n\n\n\nA set of opaque data contained within the structure defined by this specification.\n\n\n\n\nBundle\n\n\nTBD\n\n\n\nCompendium contents\n\n\nSee \nERC contents\n\n\nContainer\n\n\nA receptacle holding a collection of things (\"payload\" or \"contents\"). In the context of this specification, several of such containers are distinguished: \nruntime container\n, \nouter container\n, and \nDocker container\n.\n\n\nSee also \nbundle\n.\n\n\nDocker container\n\n\nTBD\n\n\nERC\n\n\nExecutable Research Compendium, see \nthis article\n\n\nERC contents\n\n\nThe file created by the author of the original analysis.\n\n\nERC metadata\n\n\nSchema compliant information about the ERC, its contents and creators.\n\n\nInner container\n\n\nSee \nruntime container\n\n\nInteraction file\n\n\nThe file in the container that a reader opens using a suitable tool to read the text and explore the graphics.\n\n\nOAIS\n\n\nThe Open Archival Information System and its reference model.\n\n\nOuter container\n\n\n...\n\n\nReproducible, Reproducibility, Replication\n\n\nSee \nsection 2.1 \"Definition of Reproducibility\"\n.\n\n\nRuntime container\n\n\n...\n\n\nUI bindings\n\n\nTBD",
            "title": "Glossary"
        },
        {
            "location": "/glossary/#glossary",
            "text": "",
            "title": "Glossary"
        },
        {
            "location": "/glossary/#computational-analysis",
            "text": "A scientific workflow that is to be preserved in an ERC. It conducts a number of operations on data and generates an output (text, numbers, plots).",
            "title": "(Computational) Analysis"
        },
        {
            "location": "/glossary/#bag",
            "text": "See  BagIt specification .   A set of opaque data contained within the structure defined by this specification.",
            "title": "Bag"
        },
        {
            "location": "/glossary/#bundle",
            "text": "TBD",
            "title": "Bundle"
        },
        {
            "location": "/glossary/#compendium-contents",
            "text": "See  ERC contents",
            "title": "Compendium contents"
        },
        {
            "location": "/glossary/#container",
            "text": "A receptacle holding a collection of things (\"payload\" or \"contents\"). In the context of this specification, several of such containers are distinguished:  runtime container ,  outer container , and  Docker container .  See also  bundle .",
            "title": "Container"
        },
        {
            "location": "/glossary/#docker-container",
            "text": "TBD",
            "title": "Docker container"
        },
        {
            "location": "/glossary/#erc",
            "text": "Executable Research Compendium, see  this article",
            "title": "ERC"
        },
        {
            "location": "/glossary/#erc-contents",
            "text": "The file created by the author of the original analysis.",
            "title": "ERC contents"
        },
        {
            "location": "/glossary/#erc-metadata",
            "text": "Schema compliant information about the ERC, its contents and creators.",
            "title": "ERC metadata"
        },
        {
            "location": "/glossary/#inner-container",
            "text": "See  runtime container",
            "title": "Inner container"
        },
        {
            "location": "/glossary/#interaction-file",
            "text": "The file in the container that a reader opens using a suitable tool to read the text and explore the graphics.",
            "title": "Interaction file"
        },
        {
            "location": "/glossary/#oais",
            "text": "The Open Archival Information System and its reference model.",
            "title": "OAIS"
        },
        {
            "location": "/glossary/#outer-container",
            "text": "...",
            "title": "Outer container"
        },
        {
            "location": "/glossary/#reproducible-reproducibility-replication",
            "text": "See  section 2.1 \"Definition of Reproducibility\" .",
            "title": "Reproducible, Reproducibility, Replication"
        },
        {
            "location": "/glossary/#runtime-container",
            "text": "...",
            "title": "Runtime container"
        },
        {
            "location": "/glossary/#ui-bindings",
            "text": "TBD",
            "title": "UI bindings"
        }
    ]
}