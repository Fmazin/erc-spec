{
    "docs": [
        {
            "location": "/", 
            "text": "Executable Research Compendium\n\n\nThis is the technical specification of the Executable Research Compendium (ERC).\n\n\nRead the \nspecification\n and \nget \nsupport\n.\n\n\nGuides\n\n\nAre you a \nscientist\n and want to publish your research as an ERC? Read \nuser guides for authors\n:\n\n\n\n\nERC creation\n\n\nERC examination\n\n\nERC template\n\n\n\n\nAre you a \ndeveloper\n and want to build applications for ERCs? Read \nuser guides for developers\n:\n\n\n\n\nDeveloper guide\n\n\n\n\nAre your a \nlibrarian\n or \npreservationist\n and want to use ERCs for archival of scholarly works? Read \nuser guides for librarians and preservationists\n:\n\n\n\n\nERC \n OAIS\n\n\n\n\nCredits\n\n\nThis specification and guides are developed by the members of the DFG-funded project Opening Reproducible Research\n\n\n\n\nLicense\n\n\n\n\nThe o2r Executable Research Compendium specification is licensed under \nCreative Commons CC0 1.0 Universal License\n, see file \nLICENSE\n.\nTo the extent possible under law, the people who associated CC0 with this work have waived all copyright and related or neighboring rights to this work.\nThis work is published from: Germany.\n\n\nBuild @@VERSION@@ @ @@TIMESTAMP@@", 
            "title": "Home"
        }, 
        {
            "location": "/#executable-research-compendium", 
            "text": "This is the technical specification of the Executable Research Compendium (ERC).  Read the  specification  and  get  support .", 
            "title": "Executable Research Compendium"
        }, 
        {
            "location": "/#guides", 
            "text": "Are you a  scientist  and want to publish your research as an ERC? Read  user guides for authors :   ERC creation  ERC examination  ERC template   Are you a  developer  and want to build applications for ERCs? Read  user guides for developers :   Developer guide   Are your a  librarian  or  preservationist  and want to use ERCs for archival of scholarly works? Read  user guides for librarians and preservationists :   ERC   OAIS", 
            "title": "Guides"
        }, 
        {
            "location": "/#credits", 
            "text": "This specification and guides are developed by the members of the DFG-funded project Opening Reproducible Research", 
            "title": "Credits"
        }, 
        {
            "location": "/#license", 
            "text": "The o2r Executable Research Compendium specification is licensed under  Creative Commons CC0 1.0 Universal License , see file  LICENSE .\nTo the extent possible under law, the people who associated CC0 with this work have waived all copyright and related or neighboring rights to this work.\nThis work is published from: Germany.  Build @@VERSION@@ @ @@TIMESTAMP@@", 
            "title": "License"
        }, 
        {
            "location": "/spec/", 
            "text": "ERC specification\n\n\nAn Executable Research Compendium (ERC) is a packaging convention for computational research.\nIt provides a well-defined structure for data, code, text, documentation, and user interface controls for a piece of research and is suitable for long-term archival. As such it can also be perceived as a digital object or asset.\n\n\n\n\nNote\n\n\nThis is a draft specification. If you have comments or suggestions please file them in the \nissue tracker\n. If you have explicit changes please fork the \ngit repo\n and submit a pull request.\n\n\n\n\nPreface\n\n\nVersion\n\n\nSpecification version: \n1\n\n\n\n\nWarning\n\n\nThis version is \nunder development\n!\n\n\n\n\nNotational conventions\n\n\nThe key words \nMUST\n, \nMUST NOT\n, \nREQUIRED\n, \nSHALL\n, \nSHALL NOT\n, \nSHOULD\n, \nSHOULD NOT\n, \nRECOMMENDED\n, \nMAY\n, and \nOPTIONAL\n are to be interpreted as described in \nRFC 2119\n.\n\n\nThe key words \nunspecified\n, \nundefined\n, and \nimplementation-defined\n are to be interpreted as described in the \nrationale for the C99 standard\n.\n\n\nPurpose, target audience, and context\n\n\nThis specification defines a structure to transport and execute a computational scientific analyses (cf. \ncomputational science\n).\nIt carries technical and conceptual details on how to implement the reproducibility specifications and is as such most suitable \nfor developers\n.\n\nAuthors\n may feel more comfortable with the \nuser guides\n.\n\n\nThese analyses typically comprise a workspace on a researcher\ns computer, that contains \ndata\n, \ncode\n, third party software or libraries, and outputs research results such as plots.\nCode and libraries are required in executable form to re-do a specific analysis.\nResearch is only put into a context by a \ntextual\n publication, a research paper, which is published in \nscholarly communication\n.\nThe text comes in two forms: one that is machine readable, and another one that is suitable for being read by humans.\nThe latter is often derived, or \nrendered\n from the former and can be static, visual, or even interactive following a trend towards more interactivity between reader and scientific publication.\n\n\nPutting all of these elements in a self-contained bundle allows examining, reproducing, transferring, archiving, and formal validation of computational research results.\nThe ERC specification also defines metadata and file structures to support these actions.\n\n\nMajor constituents and design goals\n\n\nThree major constituents classify user interaction with ERC:\n\n\n\n\nCreate\n means transforming a workspace with data, code and text into an ERC.\n\n\nExamine\n means looking at depths of an ERC, scrutinizing its contents.\n\n\nDiscover\n means searching for content powered by ERC properties, such as text, content metadata, code metadata et cetera.\n\n\n\n\nA core design goal is \nsimplicity\n.\nThis specification should not re-do something which already exists (if it is an open specification or tool).\nIt must be possible to create a valid and working ERC \nmanually\n, while supporting tools should be able to cover typical use cases with minimal required input by a creating user.\n\n\nThe final important notion is the one of \nnested containers\n.\nWe acknowledge well defined standards for packaging a set of files, and different approaches to create an executable code package.\nTherefore an ERC comprises \none or more containers but is itself subject to being put into a container\n.\nWe distinguish these containers into the inner or \nruntime\n container and the outer container, which is used for transfer of complete ERC and not content-aware validation.\n\n\nHow to use an ERC\n\n\nThe steps to (re-)run the analysis contained in an ERC as part of an \nexamination\n are as follows:\n\n\n\n\n(if compressed first extract then) unpack the ERC\ns outer container\n\n\nexecute the runtime container\n\n\ncompare the output files contained in the outer container with the output files just created by the runtime container\n\n\n\n\nThis way an ERC allows computational reproducibility based on the original code and data.\n\n\nERC structure\n\n\nBase directory\n\n\nAn ERC MUST has a \nbase directory\n. All paths within this document are relative to this base directory.\n\n\nThe base directory MUST contain an \nERC configuration file\n.\n\n\nBesides the files mentioned in this specification, the base directory MAY contain any other files and directories.\n\n\nMain \n display file\n\n\nAn ERC MUST have a \nmain file, i.e. the file which contains the text and instructions being the basis for the scientific publication describing the packaged analysis.\nAn ERC MUST have a _display file\n, i.e. the file which is shown to the user first when he opens an ERC in a supporting platform or tool.\n\n\nMain file\n and \ndisplay file\n MUST NOT be the same file.\n\n\nThe \nmain file\n MUST be \nexecutable\n in the sense that a software reads it as the input of a process to create the \ndisplay file\n.\nThe \nmain file\ns name SHOULD be \nmain\n with an appropriate file extension and \nmedia type\n.\n\n\n\n\nNote\n\n\nThe \nmain file\n thus follows the \nliterate programming paradigm\n.\n\n\n\n\n\n\nExample\n\n\nIf the main file is an R Markdown document, then the file extension should be \n.Rmd\n and the media type \ntext/markdown\n.\nA file \nmain.Rmd\n will consequently be automatically identified by an implementation as the ERC\ns \nmain file\n.\n\n\n\n\nThe display file\ns name SHOULD be \ndisplay\n with an appropriate file extension and media type.\n\n\n\n\nExample\n\n\nIf the display file is an Hypertext Markup Language (HTML) document, then the file extension should be \n.htm\n or \n.html\n and the media type \ntext/html\n.\nA file \ndisplay.html\n will consequently be automatically identified by an implementation as the ERC\ns \ndisplay file\n.\n\n\n\n\nThe ERC MAY use an interactive document with interactive figures and control elements for the packaged computations as the \ndisplay file\n.\nThe \ninteractive display file\n MUST have \nHTML\n format and SHOULD be valid \nHTML5\n.\n\n\n\n\nExample\n\n\nTypical examples for the two core documents are R Markdown with HTML output (i.e. \nmain.Rmd\n and \ndisplay.html\n), or an \nR\n script creating a PNG file (i.e. \nmain.R\n and \ndisplay.png\n).\n\n\n\n\nNested runtime\n\n\nThe embedding of a representation of the original runtime environment, in which an analysis was conducted, is crucial for supporting reproducible computations.\nEvery ERC MUST include two such such representations:\n\n\n\n\nan \nexecutable runtime image\n of the original analysis environment for re-running the packaged analysis, and \n\n\na \nruntime manifest\n documenting the image\ns contents as a complete, self-consistent recipe of the runtime image\ns contents which is a machine-readable format that allows a respective tool to create the runtime image.\n\n\n\n\nThe image MUST be stored as a file, e.g. a \nbinary\n, in the ERC base directory.\nThe name of the archive file MUST be configured in the ERC configuration file in the node \nimage\n under the root-level node \nexecution\n.\n\n\nThe manifest MUST be stored as a text file in the ERC base directory.\nThe name of the manifest file MUST be configured in the ERC configuration file in the node \nmanifest\n under the root-level node \nexecution\n.\n\n\nERC configuration file\n\n\nThe ERC configuration file is the \nreproducibility manifest\n for an ERC. It defines the main entry points for actions performed on an ERC and core metadata elements.\n\n\nName, format, and encoding\n\n\nThe filename MUST be \nerc.yml\n and it MUST be located in the base directory.\nThe contents MUST be valid \nYAML 1.2\n.\nThe file MUST be encoded in \nUTF-8\n and MUST NOT contain a byte-order mark (BOM).\n\n\nBasic fields\n\n\nThe first document content of this file MUST contain the following string nodes at the root level.\n\n\n\n\nspec_version\n: a text string noting the version of the used ERC specification. The appropriate version for an ERC conforming to this version of the specification is \n1\n.\n\n\nid\n: globally unique identifier for a specific ERC. This SHOULD be a URI (see \nrfc3986\n) or a \nUUID\n, Version 4.\n\n\n\n\nThe main and display file MAY be defined in root-level nodes named \nmain\n and \ndisplay\n respectively, if they differ from the default file names.\nIf they are not defined and multiple documents use the name \nmain.[ext]\n or \ndisplay.[ext]\n, an implementation SHOULD use the first file in \nalphabetical order\n.\n\n\n\n\nExample of ERC configuration file with user-defined main and display files\n\n\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nmain: the_paper_document.rmd\ndisplay: paper.html\n\n\n\n\n\nControl statements\n\n\nThe configuration file MUST contain statements to control the runtime container.\n\n\nThese statements MUST be in an array under the root-level node \nexecution\n in the ERC configuration file in the order in which they must be executed.\n\n\nImplementations SHOULD support a list of \nbash\n commands as control statements.\nThese commands are given as a list under the node \ncmd\n under the root-level node \nexecution\n.\nIf extensions use non-bash commands, they MUST define own nodes under the \nexecution\n node and SHOULD define defaults.\n\n\nThe execution statements MAY ensure the re-computation being independent from the environment, which may be different depending on the host of the execution environment.\nFor example, the time zone could be fixed via an environment variable \nTZ=CET\n, so output formatting of timestamps does not break \nchecking\n.\nThis is in addition to ERC authors handling such parameters at a script level.\n\n\n\n\nExample for control statements\n\n\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nexecution:\n  cmd:\n    - `./prepare.sh --input my_data`\n    - `./execute.sh --output results --iterations 3`\n\n\n\n\n\nLicense metadata\n\n\nThe file \nerc.yml\n MUST contain a first level node \nlicenses\n with licensing information for the code, data, and text contained.\nEach of these three have distinct requirements, hence different licenses need to be applied.\n\n\nThe node \nlicenses\n MUST have five child nodes: \ntext\n, \ndata\n, \ncode\n, \nui_bindings\n, and \nmetadata\n.\n\n\n\n\nNote\n\n\nThere is currently no mechanism to define the licenses of the used libraries, as manual creation would be tedious.\nTools for automatic creation of ERC may add such detailed licensing information and define an extension to the ERC \n\n\n\n\nThe content of each of these child nodes MUST have one of the following values:\n\n\n\n\ntext string with license identifier or license text. This SHOULD be a standardized identifier of an existing license as defined by the \nOpen Definition Licenses Service\n, or\n\n\na dictionary of all files or directories and their respective license, each of the values following the previous statement. The node values are the file paths relative to the base directory. \n\n\n\n\n\n\nExample for global licenses\n\n\n    ---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nlicenses:\n  code: Apache-2.0\n  data: ODbL-1.0\n  text: CC0-1.0\n      ui_bindings: CC0-1.0\n      metadata: CC0-1.0\n\n\n\n\n\n\n\nExample using specific licenses for files\n\n\n---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nlicenses:\n  code:\n    others_lib.bin: MIT\n    my_code.c: GPL-3.0\n  data: \n    facts.csv: ODbL-1.0\n  text:\n    README.md: CC0-1.0\n        paper.Rmd: CC-BY-4.0\n      ui_bindings: CC0-1.0\n      metadata: CC0-1.0\n\n\n\n\n\n\n\nNote\n\n\nIt IS NOT possible to assign one license to a directory and override that assignment or a single file within that directory, NOR IS it possible to use globs or regular expressions.\n\n\n\n\nComprehensive example of erc.yml\n\n\nThe following example shows all possible fields of the ERC specification with example values.\n\n\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nmain: paper.rmd\ndisplay: paper.html\nexecution:\n  cmd: \nRscript -e 'rmarkdown::render(input = \\\npaper.Rmd\\\n, output_format = \\\nhtml\\\n)'\n\nlicenses:\n  code:\n    others_lib.bin: MIT\n    my_code.c: GPL-3.0\n  data:\n    facts.csv: ODbL-1.0\n  text:\n    README.md: CC0-1.0\n    paper.Rmd: CC-BY-4.0\n  ui_bindings: CC0-1.0\n  metadata: CC0-1.0\nstructure:\n  convention: https://github.com/ropensci/rrrpkg\nui_bindings:\n  interactive: true\n  bindings:\n    - purpose: http://.../data-inspection\n      widget: http://.../tabular-browser\n      code: [...]\n      data: [...]\n      text: [...]\n    - purpose: http://.../parameter-manipulation\n      widget: http://.../dropdown\n\n\n\nThe path to the ERC configuration file subsequently MUST be \npath-to-bag\n/data/erc.yml\n.\n\n\nDocker runtime\n\n\nThe ERC uses \nDocker\n to define, build, and store the nested runtime environment, i.e. the inner container.\n\n\nRuntime image\n\n\nThe \nruntime environment or image\n MUST be represented by a \nDocker image v1.2.0\n.\n\n\n\n\nNote\n\n\nA concrete implementation of ERC may choose to rely on constructing the runtime environment from the manifest when needed, e.g. for export to a repository, while the ERC is constructed.\n\n\n\n\nThe base directory MUST contain a \ntarball\n, i.e. an archive file, of a Docker image as created be the command \ndocker save\n, see \nDocker CLI save command documentation\n, as defined in version \n1.12.x\n.\n\n\nThe image MUST have a \nlabel\n of the name \nerc\n with the ERC\ns id as value, e.g. \nerc=b9b0099e-9f8d-4a33-8acf-cb0c062efaec\n.\n\n\nThe image file MAY be compressed.\n\n\nThe tar archive file names SHOULD be \nimage.tar\n, or \nimage.tar.gz\n if a \ngzip compression is used for the archive\n with an appropriate file extension, such as \n.tar\n, \ntar.gz\n or \n.bin\n, and have an appropriate mime type, e.g. \napplication/vnd.oci.image.layer.tar+gzip\n.\n\n\n\n\nNote\n\n\nBefore exporting the Docker image, first \nbuild it\n from the Dockerfile, including the label which can be used to extract the image identifier, for example:\n\n\ndocker build --label erc=b9b0099e-9f8d-4a33-8acf-cb0c062efaec .\ndocker images --filter \nlabel=erc=b9b0099e-9f8d-4a33-8acf-cb0c062efaec\n\ndocker save $(docker images --filter \nlabel=erc=1234\n -q) \n image.tar\n# save with compression:\ndocker save $(docker images --filter \nlabel=erc=1234\n -q) | gzip -c \n     image.tar.gz\n\n\n\nDo \nnot\n use \ndocker export\n, because it is used to create a snapshot of a container, which must not match the Dockerfile anymore as it may have been \nmanipulated\n during a run.\n\n\n\n\nThe output of the image execution can be shown to the user to convey detailed information on progress or errors.\n\n\nRuntime manifest\n\n\nThe \nruntime manifest\n MUST be represented by a valid \nDockerfile\n, see \nDocker builder reference\n, as defined in version \n1.12.x\n.\n\n\nThe file MUST be named \nDockerfile\n.\n\n\nThe Dockerfile MUST contain the build instructions for the runtime environment and MUST have been used to create the image saved to the \nruntime image\n using \ndocker build\n, see \nDocker CLI build command documentation\n, as defined in version \n1.12.x\n.\nThe build SHOULD be done with the option \n--no-cache=true\n.\n\n\nThe Dockerfile MUST NOT use the \nlatest\n tag in the instruction \nFROM\n.\n\n\n\n\nNote\n\n\nThe \nlatest\n tag is \nmerely a convention\n to denote the latest available image, so any tag can have undesired results.\nNevertheless, using an image tagged \nlatest\n makes it much more likely to change over time.\nAlthough there is no guarantee that images tagged differently, e.g. \nv1.2.3\n might not change as well, using such tags shall be enforced here.\n\n\n\n\nThe Dockerfile SHOULD contain the label \nmaintainer\n to provide authorship information.\n\n\nThe Dockerfile MUST have an active instruction \nCMD\n, or a combination of the instructions \nENTRYPOINT\n and \nCMD\n, which executes the packaged analysis.\n\n\nThe Dockerfile SHOULD NOT contain \nEXPOSE\n instructions.\n\n\nDocker control statements\n\n\nThe control statements for Docker executions comprise \nload\n, for importing an image from the archive, and \nrun\n for starting a container of the loaded image.\nBoth control statements MUST be configured by using nodes of the same name under the root-level node \nexecution\n in the ERC configuration file.\nBased on the configuration, an implementation can construct the respective run-time commands, i.e. \ndocker load\n and \ndocker run\n, using the correct image file name and further parameters (e.g. performance control options).\n\n\n\n\nExample\n\n\nThe following example shows default values for \nimage\n and \nmanifest\n and typical values for \nrun\n.\n\n\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nversion: 1\nexecution:\n  image: image.tar.gz\n  manifest: Dockerfile\n  run:\n    environment:\n      - TZ=CET\n\n\n\n\n\n\n\nNote\n\n\nThe Docker CLI commands constructed based on this configuration by an implementing service could be as follows:\n\n\ndocker load --input image.tar\nIMAGE_ID=$(docker images --filter \nlabel=erc=b9b0099e-9f8d-4a33-8acf-cb0c062efaec\n -q)\ndocker run -it --name run_abc123 -e TZ=CET -v /storage/erc/abc123:/erc --label user:o2r $IMAGE_ID\n\n\n\nIn this case the implementation uses \n-it\n to pass stdout streams to the user and adds some metadata using \n--name\n and \n--label\n`.\n\n\n\n\nThe only option for \nload\n is \nquiet\n, which may be set to Boolean \ntrue\n or \nfalse\n.\n\n\nThe only option for \nrun\n is \nenvironment\n to set environment variables inside containers as defined in \ndocker-compose\n.\nEnvironment variables are defined as a list separated by \n=\n.\n\n\n\n\nExample for \nload\n and \nrun\n properties\n\n\nexecution:\n  load:\n    quiet: true\n  run:\n    environment:\n      - DEBUG=1\n      - TZ=CET\n\n\n\n\n\nThe environment variables SHOULD be used to fix settings out of control of the contained code that can hinder successful ERC \nchecking\n, e.g. by setting a time zone to avoid issues during checking.\n\n\nThe output of the container during execution MAY be shown to the user to convey detailed information to users.\n\n\nMaking data, code, and text available within container\n\n\nThe runtime environment image contains all dependencies and libraries needed by the code in an ERC.\nEspecially for large datasets, it in unfeasible to replicate the complete dataset contained within the ERC in the image.\nFor archival, it can also be confusing to replicate code and text, albeit them being relatively small in size, within the container.\n\n\nTherefore a host directory is \nmounted into a container\n at runtime using a \ndata volume\n.\n\n\nThe Dockerfile SHOULD NOT contain a \nCOPY\n or \nADD\n command to include data, code or text from the ERC into the image.\n\n\nThe Dockerfile MUST contain a \nVOLUME\n instruction to define the mount point of the ERC base directory within the container.\nThis mountpoint SHOULD be \n/erc\n.\nImplementations MUST use this value as the default.\nIf the mountpoint is different from \n/erc\n, the value MUST be defined in \nerc.yml\n in a node \nexecution.mount_point\n.\n\n\n\n\nExample for mountpoint configuration\n\n\n---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nexecution:\n  mount_point: \n/erc\n\n\n\n\n\n\n\nExample Dockerfile\n\n\nIn this example we use a \nRocker\n base image to reproduce computations made in R.\n\n\nFROM rocker/r-ver:3.3.3\n\nRUN apt-get update -qq \\\n    \n apt-get install -y --no-install-recommends \\\n    ## Packages required by R extension packages\n    # required by rmarkdown:\n    lmodern \\\n    pandoc \\\n    # for devtools (requires git2r, httr):\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    git \\\n    # for udunits:\n    libudunits2-0 \\\n    libudunits2-dev \\\n    # required when knitting the document\n    pandoc-citeproc \\\n    \n apt-get clean \\\n    \n rm -rf /var/lib/apt/lists/*\n\n# install R extension packages\nRUN install2.r -r \nhttp://cran.rstudio.com\n \\\n      rmarkdown \\\n      ggplot2 \\\n      devtools \\\n      \n rm -rf /tmp/downloaded_packages/ /tmp/*.rd\n\n# Save installed packages to file\nRUN dpkg -l \n /dpkg-list.txt\n\nLABEL maintainer=o2r \\\n  description=\nThis is an ERC image.\n \\\n    info.o2r.bag.id=\n123456\n\n\nVOLUME [\n/erc\n]\n\nENTRYPOINT [\nsh\n, \n-c\n]\nCMD [\nR --vanilla -e \\\nrmarkdown::render(input = '/erc/myPaper.rmd', output_dir = '/erc', output_format = rmarkdown::html_document())\\\n]\n\n\n\nSee also: \nBest practices for writing Dockerfiles\n.\n\n\n\n\nR workspaces\n\n\nStructure\n\n\nThe structure within the ERC contents directory are intentionally unspecified.\nHowever, the contents structure MAY follow conventions or be based on templates for organizing research artifacts.\n\n\nIf a convention is followed then it SHOULD be referenced in the ERC configuration file as a node \nconvention\n within the \nstructure\n section.\nThe node\ns value can be any text string which uniquely identifies a convention, but a URI or URL to either a human-readable description or formal specification is RECOMMENDED.\n\n\nA non-exhaustive list of potential conventions and guidelines \nfor R\n is as follows:\n\n\n\n\nROpenSci rrrpkg\n\n\nJeff Hollister\ns manuscriptPackage\n\n\nCarl Boettiger\ns template\n\n\nFrancisco Rodriguez-Sanchez\ns template\n\n\nBen Marwick\ns template\n\n\nKarl Broman\ns comments on reproducibility\n\n\n\n\n\n\nExample for using the ROPenSci \nrrrpkg\n convention\n\n\nThe convention is identified using the public link on GitHub.\n\n---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nstructure:\n  convention: https://github.com/ropensci/rrrpkg\n\n\n\n\nR Markdown main file\n\n\nThe ERC\ns \nmain file\n for R-based analyses SHOULD be \nR Markdown\n.\n\n\nThe main document SHOULD NOT contain code that loads pre-computed results from files, but conduct all analyses, even costly ones, during document weaving.\n\n\nThe document MUST NOT use \ncache=TRUE\n on any of the code chunks (see \nknitr\n options\n.\nWhile the previously cached files (\n.rdb\n and \n.rdx\n) MAY be included, they SHOULD NOT be used during the rendering of the document.\n\n\n\n\nNote\n\n\nA popular alternative solution is \nSweave\n with the \n.Rnw\n extension, which is still widely used for vignettes. R Markdown was chosen of LaTex for its simplicity for users who are unfamiliar with LaTeX.\n\n\n\n\nFixing the environment in code\n\n\nThe time zone MUST be fixed to \nUTC\n \nCoordinated Universal Time\n) to allow validation of output times (potentially broken by different output formats) by using the following code within the RMarkdown document, or other code to that effect.\n\n\nSys.setenv(\nTZ\n = \nUTC\n)\n\n\n\nThe manifest file (i.e. \nDockerfile\n) MUST run a plain R session without loading \n.RData\n files or profiles at startup, i.e. use \nR --vanilla\n.\n\n\nInteractive ERC\n\n\nEnabling interaction with the contents of an ERC is a crucial goal of this specification (see \nPreface\n).\nTherefore this section defines metadata to support two goals:\n\n\n\n\naide \ninspecting\n users to identify core functions and parameters of an analysis, and\n\n\nallow supporting software tools to create interactive renderings of ERC contents for \nmanipulation\n.\n\n\n\n\nThese goals are manifested in the \nUI bindings\n as part of the ERC configuration file under the root level property \nui_bindings\n.\n\n\nAn ERC MUST denote if UI bindings are present using the boolean property \ninteractive\n.\nIf the property is missing it defaults to \nfalse\n.\nAn implementation MAY use the indicator \ninteractive: true\n to provide other means of displaying the display file.\n\n\n\n\nExample for minimal interaction configuration\n\n\n---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nui_bindings:\n  interactive: true\n\n\n\n\n\nAn ERC MAY embed multiple concrete UI bindings.\nEach UI binding is represented by a YAML dictionary.\n\n\nIt MUST comprise a purpose and a widget using the fields \npurpose\n respectively \nwidget\n (both of type string).\nThe values of these fields SHOULD use a concept of an ontology to clearly identify their meaning.\n\n\nA \npurpose\n defines the user\ns intention, for example \nmanipulating\n a variable or \ninspecting\n dataset or code.\nA \nwidget\n realizes the purpose with a concrete interaction paradigm chosen by the author, for example an input slider, a form field, or a button.\n\n\nFor each widget, implementations MAY use the properties \ncode\n, \ndata\n, and \ntext\n to further describe how a specific UI binding acts upon the respective part of the ERC.\n\n\n\n\nExample of two UI bindings\n\n\n---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nui_bindings:\n  interactive: true\n  bindings:\n    - purpose: http://.../data-inspection\n      widget: http://.../tabular-browser\n      code: [...]\n      data: [...]\n      text: [...]\n    - purpose: http://.../parameter-manipulation\n      widget: http://.../dropdown\n\n\n\n\n\nPreservation of ERC\n\n\nThis section places the ERC in the context of preservation workflows by defining structural information and other metadata that guarantee interpretability and enable the bundling of the complete ERC as a self-contained, archivable digital object.\n\n\nArchival bundle\n\n\nFor the purpose of transferring and storing a complete ERC, it MUST be packaged using the \nBagIt File Packaging Format (V0.97)\n (BagIt) as the outer container.\nBagIt allows to store and transfer arbitrary content along with minimal metadata as well as checksum based payload validation.\n\n\nThe remainder of this section comprises\n\n\n\n\na description of the outer container,\n\n\na BagIt profile,\n\n\na package leaflet, and\n\n\nsecondary metadata files.\n\n\n\n\nBagIt outer container\n\n\nThe ERC base directory MUST be the BagIt payload directory \ndata/\n.\nThe path to the ERC configuration file subsequently MUST be \npath-to-bag\n/data/erc.yml\n.\n\n\nThe bag metadata file \nbagit.txt\n MUST contain the case-sensitive label \nIs-Executable-Research-Compendium\n with the case-insensitive value \ntrue\n to mark the bag as the outer container of an ERC.\n\n\nImplementations SHOULD use this field to identify an ERC.\n\n\n\n\nExample \nbagit.txt\n\n\nPayload-Oxum: 2172457623.43\nBagging-Date: 2016-02-01\nBag-Size: 2 GB\nIs-Executable-Research-Compendium: true\n\n\n\n\n\n\n\nExample file tree for a bagged ERC\n\n\n\u251c\u2500\u2500 bag-info.txt\n\u251c\u2500\u2500 bagit.txt\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-17-sf2.Rmd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 erc.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 image.tar\n\u251c\u2500\u2500 manifest-md5.txt\n\u2514\u2500\u2500 tagmanifest-md5.txt\n\n\n\n\n\nBagIt profile\n\n\n\n\nNote\n\n\nThe elements of the o2r Bagit Profile is yet to be specified.\nThis section is under development.\nCurrent BagIt tools do not include an option to add a BagIt Profile automatically.\n\n\n\n\nA \nBagIt Profile\n as outlined below could make the requirements of this extension more explicit.\nThe BagIt Profiles Specification Draft allows users of BagIt bags to coordinate additional information, attached to bags.\n\n\n{\n  \nBagIt-Profile-Info\n:{\n  \nBagIt-Profile-Identifier\n:\nhttp://o2r.info/erc-bagit-v1.json\n,\n  \nSource-Organization\n:\no2r.info\n,\n  \nContact-Name\n:\no2r Team\n,\n  \nContact-Email\n:\no2r@uni-muenster.de\n,\n  \nExternal-Description\n:\nBagIt profile for packaging executable research compendia.\n,\n  \nVersion\n:\n1\n\n  },\n  \nBag-Info\n:{\n    \nContact-Name\n:{\n       \nrequired\n:true\n    },\n    \nContact-Email\n:{\n       \nrequired\n:true\n    },\n    \nExternal-Identifier\n:{\n       \nrequired\n:true\n    },\n    \nBag-Size\n:{\n       \nrequired\n:true\n    },\n    \nPayload-Oxum\n:{\n       \nrequired\n:true\n    }\n  },\n  \nManifests-Required\n:[\n    \nmd5\n\n  ],\n  \nAllow-Fetch.txt\n:false,\n  \nSerialization\n:\noptional\n,\n  \nAccept-Serialization\n:[\n     \napplication/zip\n\n  ],\n  \nTag-Manifests-Required\n:[\n    \nmd5\n\n  ],\n  \nTag-Files-Required\n:[\n     \n.erc/metadata.json\n,\n     \n.erc.yml\n\n  ],\n  \nAccept-BagIt-Version\n:[\n     \n0.96\n\n  ]\n}\n\n\n\nPackage leaflet\n\n\nEach ERC MUST contain a package leaflet, describing the schemas and standards used. Available schema files are supposed to be included with the ERC, if available (licenses for these schemas may apply).\n\n\n\n\nExample package leaflet\n\n\n{\n    \nstandards_used\n: [{\n        \nname\n: \nDataCite Metadata Schema 4.0\n,\n        \nname-short\n: \ndatacite40\n,\n        \ndescription\n: \nThe DataCite Metadata Schema is a list of core metadata properties chosen for an accurate and consistent identification of a resource for citation and retrieval purposes, along with recommended use instructions.\n,\n        \nschema-version\n: \n4.0\n,\n        \nschema-path-local\n: \nerc/schema/datacite40.json \n,\n        \nschema-url\n: \nhttps://schema.datacite.org/meta/kernel-4.0/metadata.xsd\n,\n        \nschema-identifier\n: \ndoi:10.5438/0013\n\n    }, {\n        \nname\n: \nZenodo Metadata Schema\n,\n        \nname-short\n: \nzenodo\n,\n        \ndescription\n: \nThe metadata schema applicable for zenodo 2017.\n,\n        \nschema-version\n: null,\n        \nschema-path-local\n: \nerc/schema/zenodo.json \n,\n        \nschema-url\n: null,\n        \nschema-identifier\n: null\n    }]\n}\n\n\n\n\n\nElements used for each schema / standard used:\n\n\n\n\nname\n: The name of the schema.\n\n\nname-short\n: The abbreviated name.\n\n\ndescription\n: The description of the schema.\n\n\nschema-version\n: The version of the schema as stated in the corresponding official schema file.\n\n\nschema-path-local\n: The path to the local version of the schema. It may point to a translated version of the original schema, e.g. json file from xml file.\n\n\nschema-url\n: The official URL of the schema file\n\n\nschema-identifier\n: The persistent identifier for the schema/standard.\n\n\n\n\nSecondary metadata files\n\n\nThe ERC as an object can be used in a broad range of cases. For example, it can be an item under review during a journal publication, it can be the actual publication at a workshop or conference or it can be a preserved item in a digital archive. All of these have their own standards and requirements to apply, when it comes to metadata.\n\n\nThese metadata requirements \nare not\n part of this specification, but the following conventions are made to simplify and coordinate the variety.\n\n\nMetadata specific to a particular domain or use case MUST replicate the information required for the specific case in an independent file.\nDomain metadata SHOULD follow domain conventions and standards regarding format and encoding of metadata.\nDuplicate information is accepted, because it lowers the entry barrier for domain experts and systems, who can simply pick up a metadata copy in a format known to them.\n\n\nMetadata documents of specific use cases MUST be stored in a directory \n.erc\n, which is a child-directory of the ERC base directory.\n\n\nMetadata documents SHOULD be named according to the used standard or platform, and the used format respectively encoding, e.g. \ndatacite40.xml\n or \nzenodo_sandbox10.json\n, and SHOULD use a suitable mime type.\n\n\nRequirements of secondary metadata\n\n\nIn order to comply to their governing schemas, secondary metadata must include the mandatory information as set by 3rd party services. While the documentation of this quality is a perpetual task, we have gathered the information most relevant our selection of connected services.\n\n\nZenodo\n\n\n\n\nAccepts metadata as \nJSON\n.\n\n\nMandatory elements:\n\n\nUpload Type (e.g. Publication)\n\n\nPublication Type\n\n\nTitle\n\n\nCreators\n\n\nDescription\n\n\nPublication Date\n\n\nAccess Right\n\n\nLicense\n\n\n\n\n\n\n\n\nDataCite (4.0)\n\n\n\n\nAccepts metadata as \nXML\n.\n\n\nMandatory elements:\n\n\nIdentifier\n\n\nCreator\n\n\nTitle\n\n\nPublisher\n\n\nPublication Year\n\n\nResource Type\n\n\n\n\n\n\n\n\nOther third party standards that will be considered comprise: \nCodeMeta\n, \nEuDat\n, \nmets/mods\n.\n\n\nDevelopment bundle\n\n\nWhile complete ERCs are focus of this specification, for collaboration and offline \ninspection\n it is useful to provide access to parts of the ERC.\nTo support such use cases, a \ndevelopment bundle\n MAY be provided by implementations.\nThis bundle most importantly would not include the \nruntime image\n, which is potentially a large file.\n\n\nThe \ndevelopment bundle\n SHOULD always include the \nmain file\n and (e.g. by choice of the user, or by an implementing platform) MAY include other relevant files for reproduction or editing purposes outside of the runtime environment, such as input data or the \nruntime manifest\n for manual environment recreation.\n\n\nContent metadata \nunder development\n\n\nCurrent JSON dummy to visualise the properties. It SHOULD be filled out as good as possible.\n\n\n{\n    \naccess_right\n: \nopen\n,\n    \nauthor\n: [{\n        \nname\n: null,\n        \naffiliation\n: [],\n        \norcid\n: null\n    }],\n    \ncodefiles\n: [],\n    \ncommunity\n: \no2r\n,\n    \ndepends\n: [{\n        \nidentifier\n: null,\n        \nversion\n: null,\n        \npackageSystem\n: null\n    }],\n    \ndescription\n: null,\n    \nercIdentifier\n: null,\n    \nfile\n: {\n        \nfilename\n: null,\n        \nfilepath\n: null,\n        \nmimetype\n: null\n    },\n    \ngeneratedBy\n: null,\n    \nidentifier\n: {\n        \ndoi\n: null,\n        \ndoiurl\n: null,\n        \nreserveddoi\n: null\n    },\n  \ninputfiles\n: [],\n    \nkeywords\n: [],\n    \nlicense\n: {\ntext\n: None,\n            \ndata\n: None,\n            \ncode\n: None,\n            \nuibindings\n: None,\n            \nmd\n: None\n            },\n    \npaperLanguage\n: [],\n    \npaperSource\n: null,\n    \npublicationDate\n: null,\n    \nrecordDateCreated\n: null,\n    \nsoftwarePaperCitation\n: null,\n    \nspatial\n: {\n        \nfiles\n: [],\n        \nunion\n: []\n    },\n    \ntemporal\n: {\n        \nbegin\n: null,\n        \nend\n: null\n    },\n    \ntitle\n: null,\n    \nupload_type\n: \npublication\n,\n    \nviewfiles\n: []\n}\n\n\n\nThe path to the o2r metadata file MUST be \npath-to-bag\n/data/metadata.json\n.\n\n\nDescription of metadata properties\n\n\nDefining explanations on the concept of each metadata element in use.\n\n\n\n\naccess_right\n Modify embargo status, default is \nopen\n.\n\n\nauthor\n Contains a list of authors, each containing author related information.\n\n\nauthor.affiliation\n A list of institutions, organizations or other groups that the creator of the asset is associated with.\n\n\nauthor.name\n The name of the human individual, institution, organization, machine or other entity that acts as creator of the asset.\n\n\nauthor.orcid\n The ORCid of the creator of the asset.\n\n\ncodefiles\n A list of files, containing programm code (i.e. script files, e.g. .R files) retrieved during the extraction.\n\n\ncommunity\n Indicates belonging to a scientific community, e.g. on a repositoy platform.\n\n\ndepends\n A block for each entity that the software is directly dependent on for execution. The dependency information is designed for the identification of dependent packages within packaging systems. A depends block may describe a transitive dependency.\n\n\ndepends.identifier\n An identifying name for the depending package.\n\n\ndepends.version\n The computer software and hardware required to run the software.\n\n\ndepends.packageSystem\n The package manager system that makes the dependency entity available.\n\n\ndescription\n A text representation conveying the purpose and scope of the asset (the abstract).\n\n\nercIdentifier\n A universally unique character string associated with the asset as \nexecutable research compendium\n, provided by the o2r service.\n\n\nfile\n A block for the main source file for the metadata (e.g. rmd file), generated and used by the o2r service.\n\n\nfile.filename\n See above \n\n\nfile.filepath\n See above \n\n\nfile.mimetype\n See above \n\n\ngeneratedBy\n The entity, person or tool, that created the software.\n\n\nidentifier\n Contains information related to persitent identifiers for the asset.\n\n\nidentifier.doi\n The DOI for the asset.\n\n\nidentifier.doiurl\n The resolving URL for the asset.\n\n\nidentifier.reserveddoi\n The assigned but inactive DOI for the asset. Might be minted by a repository during publication.\n\n\ninputfiles\n A list of files that are loaded as resources by the main or code files of a workspace.\n\n\ninteraction\n Information on interactive elements in the asset.\n\n\ninteraction.interactive\n \nTRUE\n if interactive elements are already included, otherwise \nFALSE\n.\n\n\ninteraction.ui_binding\n A block for each UI binding - extends a figure by a UI widget, e.g. for manipulation. Final structure depends on purpose.\n\n\ninteraction.ui_binding.purpose\n What the UI binding is supposed to do.\n\n\ninteraction.ui_binding.widget\n Which UI widget realizes the purpose.\n\n\ninteraction.ui_binding.code\n A block containing source-code-specific information required to realize the UI binding.\n\n\ninteraction.ui_binding.code.filename\n Name of the file including the plot function that creates the figure.\n\n\ninteraction.ui_binding.code.function\n Name of the function that plots the figure.\n\n\ninteraction.ui_binding.code.functionParameter\n Parameters required by the shinyInputFunction. Final set of parameters depends on UI widget.\n\n\ninteraction.ui_binding.variable\n Variable that should be controlled by the UI widget.\n\n\ninteraction.ui_binding.code.shinyInputFunction\n Function that incorporates the UI widgets, provided by Shiny. \n\n\ninteraction.ui_binding.code.shinyRenderFunction\n Function that renders the plot after each change, provided by Shiny.\n\n\nkeywords\n Tags associated with the asset.\n\n\nlicense\n License information for each part of the ERC.\n\n\nlicense.code\n License for the code part of the ERC\n\n\nlicense.text\n License for the text part of the ERC\n\n\nlicense.data\n License for the data part of the ERC\n\n\nlicense.uibindings\n License for the user interface bindings of the ERC\n\n\nlicense.md\n License for the metadata of the ERC\n\n\npaperLanguage\n A list of language codes that indicate the language of the asset, e.g. \nen\n.\n\n\npaperSource\n The text document file of the paper.\n\n\npublicationDate\n The publication date of the paper publication as \nISO8601\n string.\n\n\npublication_type\n The type of the publication. Default is \nother\n since the ERC may contain text, data, code and interaction widgets not depictable by other categories.\n\n\nrecordDateCreated\n The date that this metadata record was created as \nISO8601\n string.\n\n\nsoftwarePaperCitation\n Related citation information for the asset, e.g. a citation of the related journal article.\n\n\nspatial\n Information about the geometric bounding box of the underlying data/software.\n\n\nspatial.files\n A Geojson object of the file-wise bounding boxes of the underlying data/software.\n\n\nspatial.union\n A Geojson object displaying the spatial properties, e.g. a bounding box of the whole data.\n\n\ntemporal\n Aggregated information about the relevant time period of the underlying data sets.\n\n\ntemporal.begin\n The starting point of the relevant time period.\n\n\ntemporal.end\n The end point of the relevant time period.\n\n\ntitle\n The distinguishing name of the paper publication.\n\n\nupload_type\n The zenodo upload type, default is \npublication\n. This element will be removed, once the target repository is completely configurabe within the o2r shipper micro service.\n\n\nview_file\n The main display file.\n\n\n\n\nERC checking\n\n\nProcedure\n\n\nA core feature ERCs are intended to support is comparing the output of an ERC executions with the original outputs.\nTherefore \nchecking\n an ERC always comprises two steps: the execution and the comparison.\n\n\nThe files included in the comparison are the \ncomparison set\n.\nAn implementation MUST communicate the comparison set to the user as part of a check.\n\n\nPrevious to the check, an implementation SHOULD conduct a basic validation of the outer container\ns integrity, i.e. check the file hashes.\n\n\nComparison set file\n\n\nThe ERC MAY contain a file named \n.ercignore\n in the base directory to define the comparison set.\n\n\nIts purpose is to provide a way to efficiently exclude files and directories from \nchecking\n.\nIf this file is present, any files and directories within the outer container which match the patterns within the file \n.ercignore\n will be excluded from the checking process.\nThe check MUST NOT fail when files listed in \n.ercignore\n are failing comparison.\n\n\nThe file MUST be UTF-8 (without BOM) encoded.\nThe newline-separated patterns in the file MUST be \nUnix shell globs\n.\nFor the purposes of matching, the root of the context is the ERC\ns base directory.\n\n\nLines starting with \n#\n are treated as comments and MUST be ignored by implementations.\n\n\n\n\nExample \n.ercignore\n file\n\n\n# comment\n.erc\n*/temp*\ndata-old/*\n\n\n\n\n\n\n\nNote\n\n\nIf using \nmd5\n file hashes for comparison, the set could include plain text files, for example the \ntext/*\n \nmedia types\n (see \nIANA\ns full list of media types\n.\nOf course the comparison set should include files which contain results of an analysis.\n\n\n\n\nComparing plain text documents\n\n\n\n\nComparing graphics and binary output\n\n\nThis section outlines possibilities beyond simple comparison and incorporates \nharder\n to compare files and what to do with them, e.g. plots/figures, PDFs, \n\n\nSecurity considerations\n\n\nWhy are ERC not a security risk?\n\n\n\n\nthe spec prohibits use of \nEXPOSE\n\n\nthe containers are only executed \nwithout\n external network access using \nNetwork: none\n, see \nDocker CLI run documentation", 
            "title": "ERC specification"
        }, 
        {
            "location": "/spec/#erc-specification", 
            "text": "An Executable Research Compendium (ERC) is a packaging convention for computational research.\nIt provides a well-defined structure for data, code, text, documentation, and user interface controls for a piece of research and is suitable for long-term archival. As such it can also be perceived as a digital object or asset.   Note  This is a draft specification. If you have comments or suggestions please file them in the  issue tracker . If you have explicit changes please fork the  git repo  and submit a pull request.", 
            "title": "ERC specification"
        }, 
        {
            "location": "/spec/#preface", 
            "text": "", 
            "title": "Preface"
        }, 
        {
            "location": "/spec/#version", 
            "text": "Specification version:  1   Warning  This version is  under development !", 
            "title": "Version"
        }, 
        {
            "location": "/spec/#notational-conventions", 
            "text": "The key words  MUST ,  MUST NOT ,  REQUIRED ,  SHALL ,  SHALL NOT ,  SHOULD ,  SHOULD NOT ,  RECOMMENDED ,  MAY , and  OPTIONAL  are to be interpreted as described in  RFC 2119 .  The key words  unspecified ,  undefined , and  implementation-defined  are to be interpreted as described in the  rationale for the C99 standard .", 
            "title": "Notational conventions"
        }, 
        {
            "location": "/spec/#purpose-target-audience-and-context", 
            "text": "This specification defines a structure to transport and execute a computational scientific analyses (cf.  computational science ).\nIt carries technical and conceptual details on how to implement the reproducibility specifications and is as such most suitable  for developers . Authors  may feel more comfortable with the  user guides .  These analyses typically comprise a workspace on a researcher s computer, that contains  data ,  code , third party software or libraries, and outputs research results such as plots.\nCode and libraries are required in executable form to re-do a specific analysis.\nResearch is only put into a context by a  textual  publication, a research paper, which is published in  scholarly communication .\nThe text comes in two forms: one that is machine readable, and another one that is suitable for being read by humans.\nThe latter is often derived, or  rendered  from the former and can be static, visual, or even interactive following a trend towards more interactivity between reader and scientific publication.  Putting all of these elements in a self-contained bundle allows examining, reproducing, transferring, archiving, and formal validation of computational research results.\nThe ERC specification also defines metadata and file structures to support these actions.", 
            "title": "Purpose, target audience, and context"
        }, 
        {
            "location": "/spec/#major-constituents-and-design-goals", 
            "text": "Three major constituents classify user interaction with ERC:   Create  means transforming a workspace with data, code and text into an ERC.  Examine  means looking at depths of an ERC, scrutinizing its contents.  Discover  means searching for content powered by ERC properties, such as text, content metadata, code metadata et cetera.   A core design goal is  simplicity .\nThis specification should not re-do something which already exists (if it is an open specification or tool).\nIt must be possible to create a valid and working ERC  manually , while supporting tools should be able to cover typical use cases with minimal required input by a creating user.  The final important notion is the one of  nested containers .\nWe acknowledge well defined standards for packaging a set of files, and different approaches to create an executable code package.\nTherefore an ERC comprises  one or more containers but is itself subject to being put into a container .\nWe distinguish these containers into the inner or  runtime  container and the outer container, which is used for transfer of complete ERC and not content-aware validation.", 
            "title": "Major constituents and design goals"
        }, 
        {
            "location": "/spec/#how-to-use-an-erc", 
            "text": "The steps to (re-)run the analysis contained in an ERC as part of an  examination  are as follows:   (if compressed first extract then) unpack the ERC s outer container  execute the runtime container  compare the output files contained in the outer container with the output files just created by the runtime container   This way an ERC allows computational reproducibility based on the original code and data.", 
            "title": "How to use an ERC"
        }, 
        {
            "location": "/spec/#erc-structure", 
            "text": "", 
            "title": "ERC structure"
        }, 
        {
            "location": "/spec/#base-directory", 
            "text": "An ERC MUST has a  base directory . All paths within this document are relative to this base directory.  The base directory MUST contain an  ERC configuration file .  Besides the files mentioned in this specification, the base directory MAY contain any other files and directories.", 
            "title": "Base directory"
        }, 
        {
            "location": "/spec/#main-display-file", 
            "text": "An ERC MUST have a  main file, i.e. the file which contains the text and instructions being the basis for the scientific publication describing the packaged analysis.\nAn ERC MUST have a _display file , i.e. the file which is shown to the user first when he opens an ERC in a supporting platform or tool.  Main file  and  display file  MUST NOT be the same file.  The  main file  MUST be  executable  in the sense that a software reads it as the input of a process to create the  display file .\nThe  main file s name SHOULD be  main  with an appropriate file extension and  media type .   Note  The  main file  thus follows the  literate programming paradigm .    Example  If the main file is an R Markdown document, then the file extension should be  .Rmd  and the media type  text/markdown .\nA file  main.Rmd  will consequently be automatically identified by an implementation as the ERC s  main file .   The display file s name SHOULD be  display  with an appropriate file extension and media type.   Example  If the display file is an Hypertext Markup Language (HTML) document, then the file extension should be  .htm  or  .html  and the media type  text/html .\nA file  display.html  will consequently be automatically identified by an implementation as the ERC s  display file .   The ERC MAY use an interactive document with interactive figures and control elements for the packaged computations as the  display file .\nThe  interactive display file  MUST have  HTML  format and SHOULD be valid  HTML5 .   Example  Typical examples for the two core documents are R Markdown with HTML output (i.e.  main.Rmd  and  display.html ), or an  R  script creating a PNG file (i.e.  main.R  and  display.png ).", 
            "title": "Main &amp; display file"
        }, 
        {
            "location": "/spec/#nested-runtime", 
            "text": "The embedding of a representation of the original runtime environment, in which an analysis was conducted, is crucial for supporting reproducible computations.\nEvery ERC MUST include two such such representations:   an  executable runtime image  of the original analysis environment for re-running the packaged analysis, and   a  runtime manifest  documenting the image s contents as a complete, self-consistent recipe of the runtime image s contents which is a machine-readable format that allows a respective tool to create the runtime image.   The image MUST be stored as a file, e.g. a  binary , in the ERC base directory.\nThe name of the archive file MUST be configured in the ERC configuration file in the node  image  under the root-level node  execution .  The manifest MUST be stored as a text file in the ERC base directory.\nThe name of the manifest file MUST be configured in the ERC configuration file in the node  manifest  under the root-level node  execution .", 
            "title": "Nested runtime"
        }, 
        {
            "location": "/spec/#erc-configuration-file", 
            "text": "The ERC configuration file is the  reproducibility manifest  for an ERC. It defines the main entry points for actions performed on an ERC and core metadata elements.", 
            "title": "ERC configuration file"
        }, 
        {
            "location": "/spec/#name-format-and-encoding", 
            "text": "The filename MUST be  erc.yml  and it MUST be located in the base directory.\nThe contents MUST be valid  YAML 1.2 .\nThe file MUST be encoded in  UTF-8  and MUST NOT contain a byte-order mark (BOM).", 
            "title": "Name, format, and encoding"
        }, 
        {
            "location": "/spec/#basic-fields", 
            "text": "The first document content of this file MUST contain the following string nodes at the root level.   spec_version : a text string noting the version of the used ERC specification. The appropriate version for an ERC conforming to this version of the specification is  1 .  id : globally unique identifier for a specific ERC. This SHOULD be a URI (see  rfc3986 ) or a  UUID , Version 4.   The main and display file MAY be defined in root-level nodes named  main  and  display  respectively, if they differ from the default file names.\nIf they are not defined and multiple documents use the name  main.[ext]  or  display.[ext] , an implementation SHOULD use the first file in  alphabetical order .   Example of ERC configuration file with user-defined main and display files  id: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nmain: the_paper_document.rmd\ndisplay: paper.html", 
            "title": "Basic fields"
        }, 
        {
            "location": "/spec/#control-statements", 
            "text": "The configuration file MUST contain statements to control the runtime container.  These statements MUST be in an array under the root-level node  execution  in the ERC configuration file in the order in which they must be executed.  Implementations SHOULD support a list of  bash  commands as control statements.\nThese commands are given as a list under the node  cmd  under the root-level node  execution .\nIf extensions use non-bash commands, they MUST define own nodes under the  execution  node and SHOULD define defaults.  The execution statements MAY ensure the re-computation being independent from the environment, which may be different depending on the host of the execution environment.\nFor example, the time zone could be fixed via an environment variable  TZ=CET , so output formatting of timestamps does not break  checking .\nThis is in addition to ERC authors handling such parameters at a script level.   Example for control statements  id: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nexecution:\n  cmd:\n    - `./prepare.sh --input my_data`\n    - `./execute.sh --output results --iterations 3`", 
            "title": "Control statements"
        }, 
        {
            "location": "/spec/#license-metadata", 
            "text": "The file  erc.yml  MUST contain a first level node  licenses  with licensing information for the code, data, and text contained.\nEach of these three have distinct requirements, hence different licenses need to be applied.  The node  licenses  MUST have five child nodes:  text ,  data ,  code ,  ui_bindings , and  metadata .   Note  There is currently no mechanism to define the licenses of the used libraries, as manual creation would be tedious.\nTools for automatic creation of ERC may add such detailed licensing information and define an extension to the ERC    The content of each of these child nodes MUST have one of the following values:   text string with license identifier or license text. This SHOULD be a standardized identifier of an existing license as defined by the  Open Definition Licenses Service , or  a dictionary of all files or directories and their respective license, each of the values following the previous statement. The node values are the file paths relative to the base directory.     Example for global licenses      ---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nlicenses:\n  code: Apache-2.0\n  data: ODbL-1.0\n  text: CC0-1.0\n      ui_bindings: CC0-1.0\n      metadata: CC0-1.0    Example using specific licenses for files  ---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nlicenses:\n  code:\n    others_lib.bin: MIT\n    my_code.c: GPL-3.0\n  data: \n    facts.csv: ODbL-1.0\n  text:\n    README.md: CC0-1.0\n        paper.Rmd: CC-BY-4.0\n      ui_bindings: CC0-1.0\n      metadata: CC0-1.0    Note  It IS NOT possible to assign one license to a directory and override that assignment or a single file within that directory, NOR IS it possible to use globs or regular expressions.", 
            "title": "License metadata"
        }, 
        {
            "location": "/spec/#comprehensive-example-of-ercyml", 
            "text": "The following example shows all possible fields of the ERC specification with example values.  id: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nmain: paper.rmd\ndisplay: paper.html\nexecution:\n  cmd:  Rscript -e 'rmarkdown::render(input = \\ paper.Rmd\\ , output_format = \\ html\\ )' \nlicenses:\n  code:\n    others_lib.bin: MIT\n    my_code.c: GPL-3.0\n  data:\n    facts.csv: ODbL-1.0\n  text:\n    README.md: CC0-1.0\n    paper.Rmd: CC-BY-4.0\n  ui_bindings: CC0-1.0\n  metadata: CC0-1.0\nstructure:\n  convention: https://github.com/ropensci/rrrpkg\nui_bindings:\n  interactive: true\n  bindings:\n    - purpose: http://.../data-inspection\n      widget: http://.../tabular-browser\n      code: [...]\n      data: [...]\n      text: [...]\n    - purpose: http://.../parameter-manipulation\n      widget: http://.../dropdown  The path to the ERC configuration file subsequently MUST be  path-to-bag /data/erc.yml .", 
            "title": "Comprehensive example of erc.yml"
        }, 
        {
            "location": "/spec/#docker-runtime", 
            "text": "The ERC uses  Docker  to define, build, and store the nested runtime environment, i.e. the inner container.", 
            "title": "Docker runtime"
        }, 
        {
            "location": "/spec/#runtime-image", 
            "text": "The  runtime environment or image  MUST be represented by a  Docker image v1.2.0 .   Note  A concrete implementation of ERC may choose to rely on constructing the runtime environment from the manifest when needed, e.g. for export to a repository, while the ERC is constructed.   The base directory MUST contain a  tarball , i.e. an archive file, of a Docker image as created be the command  docker save , see  Docker CLI save command documentation , as defined in version  1.12.x .  The image MUST have a  label  of the name  erc  with the ERC s id as value, e.g.  erc=b9b0099e-9f8d-4a33-8acf-cb0c062efaec .  The image file MAY be compressed.  The tar archive file names SHOULD be  image.tar , or  image.tar.gz  if a  gzip compression is used for the archive  with an appropriate file extension, such as  .tar ,  tar.gz  or  .bin , and have an appropriate mime type, e.g.  application/vnd.oci.image.layer.tar+gzip .   Note  Before exporting the Docker image, first  build it  from the Dockerfile, including the label which can be used to extract the image identifier, for example:  docker build --label erc=b9b0099e-9f8d-4a33-8acf-cb0c062efaec .\ndocker images --filter  label=erc=b9b0099e-9f8d-4a33-8acf-cb0c062efaec \ndocker save $(docker images --filter  label=erc=1234  -q)   image.tar\n# save with compression:\ndocker save $(docker images --filter  label=erc=1234  -q) | gzip -c       image.tar.gz  Do  not  use  docker export , because it is used to create a snapshot of a container, which must not match the Dockerfile anymore as it may have been  manipulated  during a run.   The output of the image execution can be shown to the user to convey detailed information on progress or errors.", 
            "title": "Runtime image"
        }, 
        {
            "location": "/spec/#runtime-manifest", 
            "text": "The  runtime manifest  MUST be represented by a valid  Dockerfile , see  Docker builder reference , as defined in version  1.12.x .  The file MUST be named  Dockerfile .  The Dockerfile MUST contain the build instructions for the runtime environment and MUST have been used to create the image saved to the  runtime image  using  docker build , see  Docker CLI build command documentation , as defined in version  1.12.x .\nThe build SHOULD be done with the option  --no-cache=true .  The Dockerfile MUST NOT use the  latest  tag in the instruction  FROM .   Note  The  latest  tag is  merely a convention  to denote the latest available image, so any tag can have undesired results.\nNevertheless, using an image tagged  latest  makes it much more likely to change over time.\nAlthough there is no guarantee that images tagged differently, e.g.  v1.2.3  might not change as well, using such tags shall be enforced here.   The Dockerfile SHOULD contain the label  maintainer  to provide authorship information.  The Dockerfile MUST have an active instruction  CMD , or a combination of the instructions  ENTRYPOINT  and  CMD , which executes the packaged analysis.  The Dockerfile SHOULD NOT contain  EXPOSE  instructions.", 
            "title": "Runtime manifest"
        }, 
        {
            "location": "/spec/#docker-control-statements", 
            "text": "The control statements for Docker executions comprise  load , for importing an image from the archive, and  run  for starting a container of the loaded image.\nBoth control statements MUST be configured by using nodes of the same name under the root-level node  execution  in the ERC configuration file.\nBased on the configuration, an implementation can construct the respective run-time commands, i.e.  docker load  and  docker run , using the correct image file name and further parameters (e.g. performance control options).   Example  The following example shows default values for  image  and  manifest  and typical values for  run .  id: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nversion: 1\nexecution:\n  image: image.tar.gz\n  manifest: Dockerfile\n  run:\n    environment:\n      - TZ=CET    Note  The Docker CLI commands constructed based on this configuration by an implementing service could be as follows:  docker load --input image.tar\nIMAGE_ID=$(docker images --filter  label=erc=b9b0099e-9f8d-4a33-8acf-cb0c062efaec  -q)\ndocker run -it --name run_abc123 -e TZ=CET -v /storage/erc/abc123:/erc --label user:o2r $IMAGE_ID  In this case the implementation uses  -it  to pass stdout streams to the user and adds some metadata using  --name  and  --label `.   The only option for  load  is  quiet , which may be set to Boolean  true  or  false .  The only option for  run  is  environment  to set environment variables inside containers as defined in  docker-compose .\nEnvironment variables are defined as a list separated by  = .   Example for  load  and  run  properties  execution:\n  load:\n    quiet: true\n  run:\n    environment:\n      - DEBUG=1\n      - TZ=CET   The environment variables SHOULD be used to fix settings out of control of the contained code that can hinder successful ERC  checking , e.g. by setting a time zone to avoid issues during checking.  The output of the container during execution MAY be shown to the user to convey detailed information to users.", 
            "title": "Docker control statements"
        }, 
        {
            "location": "/spec/#making-data-code-and-text-available-within-container", 
            "text": "The runtime environment image contains all dependencies and libraries needed by the code in an ERC.\nEspecially for large datasets, it in unfeasible to replicate the complete dataset contained within the ERC in the image.\nFor archival, it can also be confusing to replicate code and text, albeit them being relatively small in size, within the container.  Therefore a host directory is  mounted into a container  at runtime using a  data volume .  The Dockerfile SHOULD NOT contain a  COPY  or  ADD  command to include data, code or text from the ERC into the image.  The Dockerfile MUST contain a  VOLUME  instruction to define the mount point of the ERC base directory within the container.\nThis mountpoint SHOULD be  /erc .\nImplementations MUST use this value as the default.\nIf the mountpoint is different from  /erc , the value MUST be defined in  erc.yml  in a node  execution.mount_point .   Example for mountpoint configuration  ---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nexecution:\n  mount_point:  /erc    Example Dockerfile  In this example we use a  Rocker  base image to reproduce computations made in R.  FROM rocker/r-ver:3.3.3\n\nRUN apt-get update -qq \\\n      apt-get install -y --no-install-recommends \\\n    ## Packages required by R extension packages\n    # required by rmarkdown:\n    lmodern \\\n    pandoc \\\n    # for devtools (requires git2r, httr):\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    git \\\n    # for udunits:\n    libudunits2-0 \\\n    libudunits2-dev \\\n    # required when knitting the document\n    pandoc-citeproc \\\n      apt-get clean \\\n      rm -rf /var/lib/apt/lists/*\n\n# install R extension packages\nRUN install2.r -r  http://cran.rstudio.com  \\\n      rmarkdown \\\n      ggplot2 \\\n      devtools \\\n        rm -rf /tmp/downloaded_packages/ /tmp/*.rd\n\n# Save installed packages to file\nRUN dpkg -l   /dpkg-list.txt\n\nLABEL maintainer=o2r \\\n  description= This is an ERC image.  \\\n    info.o2r.bag.id= 123456 \n\nVOLUME [ /erc ]\n\nENTRYPOINT [ sh ,  -c ]\nCMD [ R --vanilla -e \\ rmarkdown::render(input = '/erc/myPaper.rmd', output_dir = '/erc', output_format = rmarkdown::html_document())\\ ]  See also:  Best practices for writing Dockerfiles .", 
            "title": "Making data, code, and text available within container"
        }, 
        {
            "location": "/spec/#r-workspaces", 
            "text": "", 
            "title": "R workspaces"
        }, 
        {
            "location": "/spec/#structure", 
            "text": "The structure within the ERC contents directory are intentionally unspecified.\nHowever, the contents structure MAY follow conventions or be based on templates for organizing research artifacts.  If a convention is followed then it SHOULD be referenced in the ERC configuration file as a node  convention  within the  structure  section.\nThe node s value can be any text string which uniquely identifies a convention, but a URI or URL to either a human-readable description or formal specification is RECOMMENDED.  A non-exhaustive list of potential conventions and guidelines  for R  is as follows:   ROpenSci rrrpkg  Jeff Hollister s manuscriptPackage  Carl Boettiger s template  Francisco Rodriguez-Sanchez s template  Ben Marwick s template  Karl Broman s comments on reproducibility    Example for using the ROPenSci  rrrpkg  convention  The convention is identified using the public link on GitHub. ---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nstructure:\n  convention: https://github.com/ropensci/rrrpkg", 
            "title": "Structure"
        }, 
        {
            "location": "/spec/#r-markdown-main-file", 
            "text": "The ERC s  main file  for R-based analyses SHOULD be  R Markdown .  The main document SHOULD NOT contain code that loads pre-computed results from files, but conduct all analyses, even costly ones, during document weaving.  The document MUST NOT use  cache=TRUE  on any of the code chunks (see  knitr  options .\nWhile the previously cached files ( .rdb  and  .rdx ) MAY be included, they SHOULD NOT be used during the rendering of the document.   Note  A popular alternative solution is  Sweave  with the  .Rnw  extension, which is still widely used for vignettes. R Markdown was chosen of LaTex for its simplicity for users who are unfamiliar with LaTeX.", 
            "title": "R Markdown main file"
        }, 
        {
            "location": "/spec/#fixing-the-environment-in-code", 
            "text": "The time zone MUST be fixed to  UTC   Coordinated Universal Time ) to allow validation of output times (potentially broken by different output formats) by using the following code within the RMarkdown document, or other code to that effect.  Sys.setenv( TZ  =  UTC )  The manifest file (i.e.  Dockerfile ) MUST run a plain R session without loading  .RData  files or profiles at startup, i.e. use  R --vanilla .", 
            "title": "Fixing the environment in code"
        }, 
        {
            "location": "/spec/#interactive-erc", 
            "text": "Enabling interaction with the contents of an ERC is a crucial goal of this specification (see  Preface ).\nTherefore this section defines metadata to support two goals:   aide  inspecting  users to identify core functions and parameters of an analysis, and  allow supporting software tools to create interactive renderings of ERC contents for  manipulation .   These goals are manifested in the  UI bindings  as part of the ERC configuration file under the root level property  ui_bindings .  An ERC MUST denote if UI bindings are present using the boolean property  interactive .\nIf the property is missing it defaults to  false .\nAn implementation MAY use the indicator  interactive: true  to provide other means of displaying the display file.   Example for minimal interaction configuration  ---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nui_bindings:\n  interactive: true   An ERC MAY embed multiple concrete UI bindings.\nEach UI binding is represented by a YAML dictionary.  It MUST comprise a purpose and a widget using the fields  purpose  respectively  widget  (both of type string).\nThe values of these fields SHOULD use a concept of an ontology to clearly identify their meaning.  A  purpose  defines the user s intention, for example  manipulating  a variable or  inspecting  dataset or code.\nA  widget  realizes the purpose with a concrete interaction paradigm chosen by the author, for example an input slider, a form field, or a button.  For each widget, implementations MAY use the properties  code ,  data , and  text  to further describe how a specific UI binding acts upon the respective part of the ERC.   Example of two UI bindings  ---\nid: b9b0099e-9f8d-4a33-8acf-cb0c062efaec\nspec_version: 1\nui_bindings:\n  interactive: true\n  bindings:\n    - purpose: http://.../data-inspection\n      widget: http://.../tabular-browser\n      code: [...]\n      data: [...]\n      text: [...]\n    - purpose: http://.../parameter-manipulation\n      widget: http://.../dropdown", 
            "title": "Interactive ERC"
        }, 
        {
            "location": "/spec/#preservation-of-erc", 
            "text": "This section places the ERC in the context of preservation workflows by defining structural information and other metadata that guarantee interpretability and enable the bundling of the complete ERC as a self-contained, archivable digital object.", 
            "title": "Preservation of ERC"
        }, 
        {
            "location": "/spec/#archival-bundle", 
            "text": "For the purpose of transferring and storing a complete ERC, it MUST be packaged using the  BagIt File Packaging Format (V0.97)  (BagIt) as the outer container.\nBagIt allows to store and transfer arbitrary content along with minimal metadata as well as checksum based payload validation.  The remainder of this section comprises   a description of the outer container,  a BagIt profile,  a package leaflet, and  secondary metadata files.", 
            "title": "Archival bundle"
        }, 
        {
            "location": "/spec/#bagit-outer-container", 
            "text": "The ERC base directory MUST be the BagIt payload directory  data/ .\nThe path to the ERC configuration file subsequently MUST be  path-to-bag /data/erc.yml .  The bag metadata file  bagit.txt  MUST contain the case-sensitive label  Is-Executable-Research-Compendium  with the case-insensitive value  true  to mark the bag as the outer container of an ERC.  Implementations SHOULD use this field to identify an ERC.   Example  bagit.txt  Payload-Oxum: 2172457623.43\nBagging-Date: 2016-02-01\nBag-Size: 2 GB\nIs-Executable-Research-Compendium: true    Example file tree for a bagged ERC  \u251c\u2500\u2500 bag-info.txt\n\u251c\u2500\u2500 bagit.txt\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-17-sf2.Rmd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 erc.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 image.tar\n\u251c\u2500\u2500 manifest-md5.txt\n\u2514\u2500\u2500 tagmanifest-md5.txt", 
            "title": "BagIt outer container"
        }, 
        {
            "location": "/spec/#bagit-profile", 
            "text": "Note  The elements of the o2r Bagit Profile is yet to be specified.\nThis section is under development.\nCurrent BagIt tools do not include an option to add a BagIt Profile automatically.   A  BagIt Profile  as outlined below could make the requirements of this extension more explicit.\nThe BagIt Profiles Specification Draft allows users of BagIt bags to coordinate additional information, attached to bags.  {\n   BagIt-Profile-Info :{\n   BagIt-Profile-Identifier : http://o2r.info/erc-bagit-v1.json ,\n   Source-Organization : o2r.info ,\n   Contact-Name : o2r Team ,\n   Contact-Email : o2r@uni-muenster.de ,\n   External-Description : BagIt profile for packaging executable research compendia. ,\n   Version : 1 \n  },\n   Bag-Info :{\n     Contact-Name :{\n        required :true\n    },\n     Contact-Email :{\n        required :true\n    },\n     External-Identifier :{\n        required :true\n    },\n     Bag-Size :{\n        required :true\n    },\n     Payload-Oxum :{\n        required :true\n    }\n  },\n   Manifests-Required :[\n     md5 \n  ],\n   Allow-Fetch.txt :false,\n   Serialization : optional ,\n   Accept-Serialization :[\n      application/zip \n  ],\n   Tag-Manifests-Required :[\n     md5 \n  ],\n   Tag-Files-Required :[\n      .erc/metadata.json ,\n      .erc.yml \n  ],\n   Accept-BagIt-Version :[\n      0.96 \n  ]\n}", 
            "title": "BagIt profile"
        }, 
        {
            "location": "/spec/#package-leaflet", 
            "text": "Each ERC MUST contain a package leaflet, describing the schemas and standards used. Available schema files are supposed to be included with the ERC, if available (licenses for these schemas may apply).   Example package leaflet  {\n     standards_used : [{\n         name :  DataCite Metadata Schema 4.0 ,\n         name-short :  datacite40 ,\n         description :  The DataCite Metadata Schema is a list of core metadata properties chosen for an accurate and consistent identification of a resource for citation and retrieval purposes, along with recommended use instructions. ,\n         schema-version :  4.0 ,\n         schema-path-local :  erc/schema/datacite40.json  ,\n         schema-url :  https://schema.datacite.org/meta/kernel-4.0/metadata.xsd ,\n         schema-identifier :  doi:10.5438/0013 \n    }, {\n         name :  Zenodo Metadata Schema ,\n         name-short :  zenodo ,\n         description :  The metadata schema applicable for zenodo 2017. ,\n         schema-version : null,\n         schema-path-local :  erc/schema/zenodo.json  ,\n         schema-url : null,\n         schema-identifier : null\n    }]\n}   Elements used for each schema / standard used:   name : The name of the schema.  name-short : The abbreviated name.  description : The description of the schema.  schema-version : The version of the schema as stated in the corresponding official schema file.  schema-path-local : The path to the local version of the schema. It may point to a translated version of the original schema, e.g. json file from xml file.  schema-url : The official URL of the schema file  schema-identifier : The persistent identifier for the schema/standard.", 
            "title": "Package leaflet"
        }, 
        {
            "location": "/spec/#secondary-metadata-files", 
            "text": "The ERC as an object can be used in a broad range of cases. For example, it can be an item under review during a journal publication, it can be the actual publication at a workshop or conference or it can be a preserved item in a digital archive. All of these have their own standards and requirements to apply, when it comes to metadata.  These metadata requirements  are not  part of this specification, but the following conventions are made to simplify and coordinate the variety.  Metadata specific to a particular domain or use case MUST replicate the information required for the specific case in an independent file.\nDomain metadata SHOULD follow domain conventions and standards regarding format and encoding of metadata.\nDuplicate information is accepted, because it lowers the entry barrier for domain experts and systems, who can simply pick up a metadata copy in a format known to them.  Metadata documents of specific use cases MUST be stored in a directory  .erc , which is a child-directory of the ERC base directory.  Metadata documents SHOULD be named according to the used standard or platform, and the used format respectively encoding, e.g.  datacite40.xml  or  zenodo_sandbox10.json , and SHOULD use a suitable mime type.", 
            "title": "Secondary metadata files"
        }, 
        {
            "location": "/spec/#requirements-of-secondary-metadata", 
            "text": "In order to comply to their governing schemas, secondary metadata must include the mandatory information as set by 3rd party services. While the documentation of this quality is a perpetual task, we have gathered the information most relevant our selection of connected services.  Zenodo   Accepts metadata as  JSON .  Mandatory elements:  Upload Type (e.g. Publication)  Publication Type  Title  Creators  Description  Publication Date  Access Right  License     DataCite (4.0)   Accepts metadata as  XML .  Mandatory elements:  Identifier  Creator  Title  Publisher  Publication Year  Resource Type     Other third party standards that will be considered comprise:  CodeMeta ,  EuDat ,  mets/mods .", 
            "title": "Requirements of secondary metadata"
        }, 
        {
            "location": "/spec/#development-bundle", 
            "text": "While complete ERCs are focus of this specification, for collaboration and offline  inspection  it is useful to provide access to parts of the ERC.\nTo support such use cases, a  development bundle  MAY be provided by implementations.\nThis bundle most importantly would not include the  runtime image , which is potentially a large file.  The  development bundle  SHOULD always include the  main file  and (e.g. by choice of the user, or by an implementing platform) MAY include other relevant files for reproduction or editing purposes outside of the runtime environment, such as input data or the  runtime manifest  for manual environment recreation.", 
            "title": "Development bundle"
        }, 
        {
            "location": "/spec/#content-metadata-under-development", 
            "text": "Current JSON dummy to visualise the properties. It SHOULD be filled out as good as possible.  {\n     access_right :  open ,\n     author : [{\n         name : null,\n         affiliation : [],\n         orcid : null\n    }],\n     codefiles : [],\n     community :  o2r ,\n     depends : [{\n         identifier : null,\n         version : null,\n         packageSystem : null\n    }],\n     description : null,\n     ercIdentifier : null,\n     file : {\n         filename : null,\n         filepath : null,\n         mimetype : null\n    },\n     generatedBy : null,\n     identifier : {\n         doi : null,\n         doiurl : null,\n         reserveddoi : null\n    },\n   inputfiles : [],\n     keywords : [],\n     license : { text : None,\n             data : None,\n             code : None,\n             uibindings : None,\n             md : None\n            },\n     paperLanguage : [],\n     paperSource : null,\n     publicationDate : null,\n     recordDateCreated : null,\n     softwarePaperCitation : null,\n     spatial : {\n         files : [],\n         union : []\n    },\n     temporal : {\n         begin : null,\n         end : null\n    },\n     title : null,\n     upload_type :  publication ,\n     viewfiles : []\n}  The path to the o2r metadata file MUST be  path-to-bag /data/metadata.json .", 
            "title": "Content metadata under development"
        }, 
        {
            "location": "/spec/#description-of-metadata-properties", 
            "text": "Defining explanations on the concept of each metadata element in use.   access_right  Modify embargo status, default is  open .  author  Contains a list of authors, each containing author related information.  author.affiliation  A list of institutions, organizations or other groups that the creator of the asset is associated with.  author.name  The name of the human individual, institution, organization, machine or other entity that acts as creator of the asset.  author.orcid  The ORCid of the creator of the asset.  codefiles  A list of files, containing programm code (i.e. script files, e.g. .R files) retrieved during the extraction.  community  Indicates belonging to a scientific community, e.g. on a repositoy platform.  depends  A block for each entity that the software is directly dependent on for execution. The dependency information is designed for the identification of dependent packages within packaging systems. A depends block may describe a transitive dependency.  depends.identifier  An identifying name for the depending package.  depends.version  The computer software and hardware required to run the software.  depends.packageSystem  The package manager system that makes the dependency entity available.  description  A text representation conveying the purpose and scope of the asset (the abstract).  ercIdentifier  A universally unique character string associated with the asset as  executable research compendium , provided by the o2r service.  file  A block for the main source file for the metadata (e.g. rmd file), generated and used by the o2r service.  file.filename  See above   file.filepath  See above   file.mimetype  See above   generatedBy  The entity, person or tool, that created the software.  identifier  Contains information related to persitent identifiers for the asset.  identifier.doi  The DOI for the asset.  identifier.doiurl  The resolving URL for the asset.  identifier.reserveddoi  The assigned but inactive DOI for the asset. Might be minted by a repository during publication.  inputfiles  A list of files that are loaded as resources by the main or code files of a workspace.  interaction  Information on interactive elements in the asset.  interaction.interactive   TRUE  if interactive elements are already included, otherwise  FALSE .  interaction.ui_binding  A block for each UI binding - extends a figure by a UI widget, e.g. for manipulation. Final structure depends on purpose.  interaction.ui_binding.purpose  What the UI binding is supposed to do.  interaction.ui_binding.widget  Which UI widget realizes the purpose.  interaction.ui_binding.code  A block containing source-code-specific information required to realize the UI binding.  interaction.ui_binding.code.filename  Name of the file including the plot function that creates the figure.  interaction.ui_binding.code.function  Name of the function that plots the figure.  interaction.ui_binding.code.functionParameter  Parameters required by the shinyInputFunction. Final set of parameters depends on UI widget.  interaction.ui_binding.variable  Variable that should be controlled by the UI widget.  interaction.ui_binding.code.shinyInputFunction  Function that incorporates the UI widgets, provided by Shiny.   interaction.ui_binding.code.shinyRenderFunction  Function that renders the plot after each change, provided by Shiny.  keywords  Tags associated with the asset.  license  License information for each part of the ERC.  license.code  License for the code part of the ERC  license.text  License for the text part of the ERC  license.data  License for the data part of the ERC  license.uibindings  License for the user interface bindings of the ERC  license.md  License for the metadata of the ERC  paperLanguage  A list of language codes that indicate the language of the asset, e.g.  en .  paperSource  The text document file of the paper.  publicationDate  The publication date of the paper publication as  ISO8601  string.  publication_type  The type of the publication. Default is  other  since the ERC may contain text, data, code and interaction widgets not depictable by other categories.  recordDateCreated  The date that this metadata record was created as  ISO8601  string.  softwarePaperCitation  Related citation information for the asset, e.g. a citation of the related journal article.  spatial  Information about the geometric bounding box of the underlying data/software.  spatial.files  A Geojson object of the file-wise bounding boxes of the underlying data/software.  spatial.union  A Geojson object displaying the spatial properties, e.g. a bounding box of the whole data.  temporal  Aggregated information about the relevant time period of the underlying data sets.  temporal.begin  The starting point of the relevant time period.  temporal.end  The end point of the relevant time period.  title  The distinguishing name of the paper publication.  upload_type  The zenodo upload type, default is  publication . This element will be removed, once the target repository is completely configurabe within the o2r shipper micro service.  view_file  The main display file.", 
            "title": "Description of metadata properties"
        }, 
        {
            "location": "/spec/#erc-checking", 
            "text": "", 
            "title": "ERC checking"
        }, 
        {
            "location": "/spec/#procedure", 
            "text": "A core feature ERCs are intended to support is comparing the output of an ERC executions with the original outputs.\nTherefore  checking  an ERC always comprises two steps: the execution and the comparison.  The files included in the comparison are the  comparison set .\nAn implementation MUST communicate the comparison set to the user as part of a check.  Previous to the check, an implementation SHOULD conduct a basic validation of the outer container s integrity, i.e. check the file hashes.", 
            "title": "Procedure"
        }, 
        {
            "location": "/spec/#comparison-set-file", 
            "text": "The ERC MAY contain a file named  .ercignore  in the base directory to define the comparison set.  Its purpose is to provide a way to efficiently exclude files and directories from  checking .\nIf this file is present, any files and directories within the outer container which match the patterns within the file  .ercignore  will be excluded from the checking process.\nThe check MUST NOT fail when files listed in  .ercignore  are failing comparison.  The file MUST be UTF-8 (without BOM) encoded.\nThe newline-separated patterns in the file MUST be  Unix shell globs .\nFor the purposes of matching, the root of the context is the ERC s base directory.  Lines starting with  #  are treated as comments and MUST be ignored by implementations.   Example  .ercignore  file  # comment\n.erc\n*/temp*\ndata-old/*    Note  If using  md5  file hashes for comparison, the set could include plain text files, for example the  text/*   media types  (see  IANA s full list of media types .\nOf course the comparison set should include files which contain results of an analysis.", 
            "title": "Comparison set file"
        }, 
        {
            "location": "/spec/#comparing-plain-text-documents", 
            "text": "", 
            "title": "Comparing plain text documents"
        }, 
        {
            "location": "/spec/#comparing-graphics-and-binary-output", 
            "text": "This section outlines possibilities beyond simple comparison and incorporates  harder  to compare files and what to do with them, e.g. plots/figures, PDFs,", 
            "title": "Comparing graphics and binary output"
        }, 
        {
            "location": "/spec/#security-considerations", 
            "text": "Why are ERC not a security risk?   the spec prohibits use of  EXPOSE  the containers are only executed  without  external network access using  Network: none , see  Docker CLI run documentation", 
            "title": "Security considerations"
        }, 
        {
            "location": "/user-guide/creation/", 
            "text": "User guide: ERC creation\n\n\nThis user guide comprises instructions how to create an ERC \nby hand\n.\nIt is thus limited to mandatory elements in some places.\nHowever, a fundamental goal of the ERC specification is to be simple enough to allow manual ERC creation as demonstrated in this document.\nIt is supposed to ease the understanding of the ERC especially for the authors of scientific publications.\nFor using tools or services for creation and validation of ERCs, please see the \ndeveloper guide\n.\n\n\n\n\nNote\n\n\nThis is a draft.\nIf you have comments or suggestions please file them in the \nissue tracker\n.\nIf you have explicit changes please fork the \ngit repo\n and submit a pull request.\n\n\n\n\nStep 1: create workspace\n\n\nDo your research and create something useful that works for you.\n\nThe ERC specification makes no restrictions on the contents of a workspace, but guidelines and best practices do exist and should be followed by users during their research i.e. even before packaging it in an ERC.\n\n\nCode and versioning\n\n\nIf the base directory contains a script file or source code used to conduct the packaged analysis, we recommend this code is managed using \ndistributed version control\n, see \nsoftware carpentry guidelines\n.\nThe base directory should contain a copy of the complete repository in that case.\n\n\nWorkspace structure\n\n\nThe base directory contents should follow common guidelines to project organisation.\nSome useful resources are\n\n\n\n\nSoftware carpentry paper \nGood enough practices in Scientific Computing\n\n\nROpenSci research compendium\n).\n\n\nROpenSci reproducibility guide\n\n\n\n\nStep 2: create image container for runtime\n\n\nTo create a working ERC you must include a complete environment description and an executable image.\n\n\nWe recommend using Docker, so a Dockerfile and a Docker image tarball archive file, to achieve these goals.\n\n\nSee the \nruntime section\n for detailed requirements, including links to the relevant Docker commands.\n\n\nStep 3: create metadata\n\n\nERC metadata\n\n\nStructural \n administrative metadata must be put into the ERC configuration file \nerc.yml\n as defined in the \nspecification\n.\n\n\nWhen creating the erc manually, you can receive a uuid4 as \nid\n for the erc configuration file using an online service, e.g. \nuuidgenerator\n or one of the numerous implementations for the common programming languages.\n\n\nLicense metadata\n\n\nPlease consult your employer or legal department for a suitable license for your work. Make sure you hold the copyright for any code that you want to release under a self-chosen license.\n\n\nFurther resources that are linked here without any endorsement or being checked:\n\n\n\n\nchoosealicense.com\n (for code)\n\n\nopendefinition.org\n (for code, data, text)\n\n\nA short lecture on Open Licensing by Lorena A. Barba\n\n\n\n\nLicense information must be put into the ERC configuration file \nerc.yml\n as defined in the \nspecification\n.\n\n\nContent metadata\n\n\nContent metadata are used for making your work findable.\nProperties for the content metadata are defined in the \nspecification\n and must be put into the \nmetadata.json\n file.\n\n\nSecondary metadata\n\n\nAs of now, we do not recommend creating secondary metadata by hand.\n\n\nSecondary metadata are used for third party services, e.g. repositories that define their own obligatory metadata.\nIn general they can be added in different formats to support different use cases.\n\n\nMore information on secondary metadata can be found in the \npreservation section\n.\n\n\nStep 4: validate\n\n\nYou can use the container created in step 2 for validation purposes, too.\nRun the analysis in the container, then copy the analysis output to a temporary directory on the host system, and finally compare the original workspace and the temporary directory according the \nvalidation rules\n to ensure a complete replication.\n\n\nStep 5: create bag\n\n\nTo create a package that is suitable for being stored in an archive or repository, ERCs must be bundled as BagIt bags.\nTake a look at the \npreservation section\n for a detailed background about the purpose of BagIt and other digital preservation aspects.\n\n\nThird party tools for creating BagIt bags\n\n\n\n\nBagger\n (version 2.7, Java-based, with UI)\n\n\nbagit-python\n (Python package)\n\n\n\n\nCreating the bag\n\n\nIn this guide we will create the bag manually by using the Library of Congress\ns (LoC) tool \nBagger\n, listed above.\n\n\n\n\nStart by selecting \nCreate new bag\n from the main menu and proceed with \nno profile\n.\n\n\nAdd your files with the \n+\n Button.\n\n\nUncheck the \nStandard\n feature in the Bag-Info-Editor on the right and add \nERC-Version\n with the appropriate version you want to use, e.g. \n1\n. Optionally fill out additional Bag-Info metadata, e.g. \ncontact information\n.\n\n\nSave your bag using the main menu.\n\n\n\n\nValidating the bag\n\n\nA file tree for the final bagged ERC may look like this:\n\n\n\u251c\u2500\u2500 bag-info.txt\n\u251c\u2500\u2500 bagit.txt\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-17-myPaper.Rmd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 erc.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 image.tar\n\u251c\u2500\u2500 manifest-md5.txt\n\u2514\u2500\u2500 tagmanifest-md5.txt\n\n\n\nYou can validate your bag with \nBagger\n by loading the bag and then clicking on \nValidate Bag\n in the main menu.\nThe programme will check for completeness of BagIt-related files and verify the integrity of the data files by computing their checksums (hashes) and report any potential issues.", 
            "title": "Creation guide for authors"
        }, 
        {
            "location": "/user-guide/creation/#user-guide-erc-creation", 
            "text": "This user guide comprises instructions how to create an ERC  by hand .\nIt is thus limited to mandatory elements in some places.\nHowever, a fundamental goal of the ERC specification is to be simple enough to allow manual ERC creation as demonstrated in this document.\nIt is supposed to ease the understanding of the ERC especially for the authors of scientific publications.\nFor using tools or services for creation and validation of ERCs, please see the  developer guide .   Note  This is a draft.\nIf you have comments or suggestions please file them in the  issue tracker .\nIf you have explicit changes please fork the  git repo  and submit a pull request.", 
            "title": "User guide: ERC creation"
        }, 
        {
            "location": "/user-guide/creation/#step-1-create-workspace", 
            "text": "Do your research and create something useful that works for you. \nThe ERC specification makes no restrictions on the contents of a workspace, but guidelines and best practices do exist and should be followed by users during their research i.e. even before packaging it in an ERC.", 
            "title": "Step 1: create workspace"
        }, 
        {
            "location": "/user-guide/creation/#code-and-versioning", 
            "text": "If the base directory contains a script file or source code used to conduct the packaged analysis, we recommend this code is managed using  distributed version control , see  software carpentry guidelines .\nThe base directory should contain a copy of the complete repository in that case.", 
            "title": "Code and versioning"
        }, 
        {
            "location": "/user-guide/creation/#workspace-structure", 
            "text": "The base directory contents should follow common guidelines to project organisation.\nSome useful resources are   Software carpentry paper  Good enough practices in Scientific Computing  ROpenSci research compendium ).  ROpenSci reproducibility guide", 
            "title": "Workspace structure"
        }, 
        {
            "location": "/user-guide/creation/#step-2-create-image-container-for-runtime", 
            "text": "To create a working ERC you must include a complete environment description and an executable image.  We recommend using Docker, so a Dockerfile and a Docker image tarball archive file, to achieve these goals.  See the  runtime section  for detailed requirements, including links to the relevant Docker commands.", 
            "title": "Step 2: create image container for runtime"
        }, 
        {
            "location": "/user-guide/creation/#step-3-create-metadata", 
            "text": "", 
            "title": "Step 3: create metadata"
        }, 
        {
            "location": "/user-guide/creation/#erc-metadata", 
            "text": "Structural   administrative metadata must be put into the ERC configuration file  erc.yml  as defined in the  specification .  When creating the erc manually, you can receive a uuid4 as  id  for the erc configuration file using an online service, e.g.  uuidgenerator  or one of the numerous implementations for the common programming languages.", 
            "title": "ERC metadata"
        }, 
        {
            "location": "/user-guide/creation/#license-metadata", 
            "text": "Please consult your employer or legal department for a suitable license for your work. Make sure you hold the copyright for any code that you want to release under a self-chosen license.  Further resources that are linked here without any endorsement or being checked:   choosealicense.com  (for code)  opendefinition.org  (for code, data, text)  A short lecture on Open Licensing by Lorena A. Barba   License information must be put into the ERC configuration file  erc.yml  as defined in the  specification .", 
            "title": "License metadata"
        }, 
        {
            "location": "/user-guide/creation/#content-metadata", 
            "text": "Content metadata are used for making your work findable.\nProperties for the content metadata are defined in the  specification  and must be put into the  metadata.json  file.", 
            "title": "Content metadata"
        }, 
        {
            "location": "/user-guide/creation/#secondary-metadata", 
            "text": "As of now, we do not recommend creating secondary metadata by hand.  Secondary metadata are used for third party services, e.g. repositories that define their own obligatory metadata.\nIn general they can be added in different formats to support different use cases.  More information on secondary metadata can be found in the  preservation section .", 
            "title": "Secondary metadata"
        }, 
        {
            "location": "/user-guide/creation/#step-4-validate", 
            "text": "You can use the container created in step 2 for validation purposes, too.\nRun the analysis in the container, then copy the analysis output to a temporary directory on the host system, and finally compare the original workspace and the temporary directory according the  validation rules  to ensure a complete replication.", 
            "title": "Step 4: validate"
        }, 
        {
            "location": "/user-guide/creation/#step-5-create-bag", 
            "text": "To create a package that is suitable for being stored in an archive or repository, ERCs must be bundled as BagIt bags.\nTake a look at the  preservation section  for a detailed background about the purpose of BagIt and other digital preservation aspects.", 
            "title": "Step 5: create bag"
        }, 
        {
            "location": "/user-guide/creation/#third-party-tools-for-creating-bagit-bags", 
            "text": "Bagger  (version 2.7, Java-based, with UI)  bagit-python  (Python package)", 
            "title": "Third party tools for creating BagIt bags"
        }, 
        {
            "location": "/user-guide/creation/#creating-the-bag", 
            "text": "In this guide we will create the bag manually by using the Library of Congress s (LoC) tool  Bagger , listed above.   Start by selecting  Create new bag  from the main menu and proceed with  no profile .  Add your files with the  +  Button.  Uncheck the  Standard  feature in the Bag-Info-Editor on the right and add  ERC-Version  with the appropriate version you want to use, e.g.  1 . Optionally fill out additional Bag-Info metadata, e.g.  contact information .  Save your bag using the main menu.", 
            "title": "Creating the bag"
        }, 
        {
            "location": "/user-guide/creation/#validating-the-bag", 
            "text": "A file tree for the final bagged ERC may look like this:  \u251c\u2500\u2500 bag-info.txt\n\u251c\u2500\u2500 bagit.txt\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-17-myPaper.Rmd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 erc.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 image.tar\n\u251c\u2500\u2500 manifest-md5.txt\n\u2514\u2500\u2500 tagmanifest-md5.txt  You can validate your bag with  Bagger  by loading the bag and then clicking on  Validate Bag  in the main menu.\nThe programme will check for completeness of BagIt-related files and verify the integrity of the data files by computing their checksums (hashes) and report any potential issues.", 
            "title": "Validating the bag"
        }, 
        {
            "location": "/user-guide/examination/", 
            "text": "User guide: ERC examination\n\n\nTBD", 
            "title": "Examination guide for authors"
        }, 
        {
            "location": "/user-guide/examination/#user-guide-erc-examination", 
            "text": "TBD", 
            "title": "User guide: ERC examination"
        }, 
        {
            "location": "/user-guide/template/", 
            "text": "User guide: ERC template - WORK IN PROGRESS\n\n\nIf you want to create an ERC for your research already at the beginning, and not \npost-hoc\n after your research is complete, these templates can hopefully help.\nThey are divided into specific domains to be more concrete.\n\n\nGeoscience research in R\n\n\nFiles in this template\n\n\n\n\ndocument.md\n use RMarkdown, this is the main document\n\n\nerc.yml\n is template for the ERC configuration file with placeholders for all required fields\n\n\nDockerfile\n is a template Dockerfile with some commands you can re-use to make sure all packages and tools that you need are installed\n\n\n\n\nHeader template\n\n\nThe yaml header of the \ndocument.md\n file is the right place to enter your meta information right away from the start: Fill out the metadata fields, included in the template, as early in your personal workflow as possible and keep them up-to-date to prepare for the ERC creation progress. The metadata extractor of the o2r service will collect and prefer information from RMarkdown document headers.\n\n\n---\nauthor:\n  - name: Your Name\n    affiliation: Your affiliation\n    orcid: Your ORCid\n  - name: Your co-author's name\n    affiliation: Their affiliation\n    orcid: Their ORCid\ntitle: The title of your publication\nabstract:\n  A concise description of your publication\nkeywords: [lorem, ipsum, dolor, sit, amet]\ndate: 2017-01-13\nlicense: cc-by\n---\n\n\n\nFilename\n | \nTemplate\n | \nERC-Spec\n \n------ | ------ | ------ |\n\ngeo_template.zip\n | Geoscience research in R | V.1", 
            "title": "ERC template for authors"
        }, 
        {
            "location": "/user-guide/template/#user-guide-erc-template-work-in-progress", 
            "text": "If you want to create an ERC for your research already at the beginning, and not  post-hoc  after your research is complete, these templates can hopefully help.\nThey are divided into specific domains to be more concrete.", 
            "title": "User guide: ERC template - WORK IN PROGRESS"
        }, 
        {
            "location": "/user-guide/template/#geoscience-research-in-r", 
            "text": "Files in this template   document.md  use RMarkdown, this is the main document  erc.yml  is template for the ERC configuration file with placeholders for all required fields  Dockerfile  is a template Dockerfile with some commands you can re-use to make sure all packages and tools that you need are installed", 
            "title": "Geoscience research in R"
        }, 
        {
            "location": "/user-guide/template/#header-template", 
            "text": "The yaml header of the  document.md  file is the right place to enter your meta information right away from the start: Fill out the metadata fields, included in the template, as early in your personal workflow as possible and keep them up-to-date to prepare for the ERC creation progress. The metadata extractor of the o2r service will collect and prefer information from RMarkdown document headers.  ---\nauthor:\n  - name: Your Name\n    affiliation: Your affiliation\n    orcid: Your ORCid\n  - name: Your co-author's name\n    affiliation: Their affiliation\n    orcid: Their ORCid\ntitle: The title of your publication\nabstract:\n  A concise description of your publication\nkeywords: [lorem, ipsum, dolor, sit, amet]\ndate: 2017-01-13\nlicense: cc-by\n---  Filename  |  Template  |  ERC-Spec  \n------ | ------ | ------ | geo_template.zip  | Geoscience research in R | V.1", 
            "title": "Header template"
        }, 
        {
            "location": "/user-guide/minimal/", 
            "text": "Minimal examples for ERCs\n\n\n\n\nR script with png plot\n\n\nR Markdown with HTML output\n\n\n\n\nR script with png plot\n\n\nMain file \nmain.R\n\n\n# http://www.budgetshippingcontainers.co.uk/info/\n# how-many-shipping-containers-are-there-in-the-world/\ncontainers \n- c(23000000,14000000,6000000)\nset.seed(42)\nbarplot(containers,\n    names.arg = c(\nin service\n, \nex-service\n, \nnew\n),\n    col = sample(colors(), 3),\n    main = paste0(\n        format(sum(containers), scientific = FALSE),\n        \n containers in the world\n)\n    )\n\n\n\nDisplay file \ndisplay.png\n\n\n\n\nERC configuration file\n\n\n---\nid: \n289a9jcl9o\n\nspec_version: \n1\n\nmain: main.R\ndisplay: display.png\n\n\n\nR Markdown with HTML output\n\n\nMain file \nmain.Rmd\n\n\n---\ntitle: \nCapacity of container ships in seaborne trade from 1980 to 2016 (in million dwt)*\n\nauthor: \nDaniel N\u00fcst\n\ndate: \n2017\n\noutput: html_document\n---\n\n```{r plot, echo=FALSE}\ndata \n- c(\n1980\n = 11, \n1985\n = 20, \n1990\n = 26, \n1995\n = 44,\n          \n2000\n = 64, \n2005\n = 98, \n2010\n = 169, \n2014\n = 216,\n          \n2015\n = 228, \n2016\n = 244)\nbarplot(data, ylab = \nCapacity\n, sub = \n\u00a9 Statista 2017\n)\n```\n\n\n This statistic portrays the capacity of the world container ship fleet from 1980 through 2016. In 2016, the world merchant container ship fleet had a capacity of around 244 million metric tons deadweight. As of January 2016, there were 5,239 container ships in the world's merchant fleet ([source](https://www.statista.com/statistics/264024/number-of-merchant-ships-worldwide-by-type/)).\n\nSources: UNCTAD; Clarkson Research Services, via [statista](https://www.statista.com/statistics/267603/capacity-of-container-ships-in-the-global-seaborne-trade/).\n\n\n\nDisplay file \ndisplay.html\n\n\n\n\n\nHTML\n\n\nERC configuration file\n\n\n---\nid: \nv97cplst6b\n\nspec_version: \n1\n\nmain: main.Rmd\ndisplay: display.html", 
            "title": "Minimal ERC examples"
        }, 
        {
            "location": "/user-guide/minimal/#minimal-examples-for-ercs", 
            "text": "R script with png plot  R Markdown with HTML output", 
            "title": "Minimal examples for ERCs"
        }, 
        {
            "location": "/user-guide/minimal/#r-script-with-png-plot", 
            "text": "", 
            "title": "R script with png plot"
        }, 
        {
            "location": "/user-guide/minimal/#main-file-mainr", 
            "text": "# http://www.budgetshippingcontainers.co.uk/info/\n# how-many-shipping-containers-are-there-in-the-world/\ncontainers  - c(23000000,14000000,6000000)\nset.seed(42)\nbarplot(containers,\n    names.arg = c( in service ,  ex-service ,  new ),\n    col = sample(colors(), 3),\n    main = paste0(\n        format(sum(containers), scientific = FALSE),\n          containers in the world )\n    )", 
            "title": "Main file main.R"
        }, 
        {
            "location": "/user-guide/minimal/#display-file-displaypng", 
            "text": "", 
            "title": "Display file display.png"
        }, 
        {
            "location": "/user-guide/minimal/#erc-configuration-file", 
            "text": "---\nid:  289a9jcl9o \nspec_version:  1 \nmain: main.R\ndisplay: display.png", 
            "title": "ERC configuration file"
        }, 
        {
            "location": "/user-guide/minimal/#r-markdown-with-html-output", 
            "text": "", 
            "title": "R Markdown with HTML output"
        }, 
        {
            "location": "/user-guide/minimal/#main-file-mainrmd", 
            "text": "---\ntitle:  Capacity of container ships in seaborne trade from 1980 to 2016 (in million dwt)* \nauthor:  Daniel N\u00fcst \ndate:  2017 \noutput: html_document\n---\n\n```{r plot, echo=FALSE}\ndata  - c( 1980  = 11,  1985  = 20,  1990  = 26,  1995  = 44,\n           2000  = 64,  2005  = 98,  2010  = 169,  2014  = 216,\n           2015  = 228,  2016  = 244)\nbarplot(data, ylab =  Capacity , sub =  \u00a9 Statista 2017 )\n```  This statistic portrays the capacity of the world container ship fleet from 1980 through 2016. In 2016, the world merchant container ship fleet had a capacity of around 244 million metric tons deadweight. As of January 2016, there were 5,239 container ships in the world's merchant fleet ([source](https://www.statista.com/statistics/264024/number-of-merchant-ships-worldwide-by-type/)).\n\nSources: UNCTAD; Clarkson Research Services, via [statista](https://www.statista.com/statistics/267603/capacity-of-container-ships-in-the-global-seaborne-trade/).", 
            "title": "Main file main.Rmd"
        }, 
        {
            "location": "/user-guide/minimal/#display-file-displayhtml", 
            "text": "HTML", 
            "title": "Display file display.html"
        }, 
        {
            "location": "/user-guide/minimal/#erc-configuration-file_1", 
            "text": "---\nid:  v97cplst6b \nspec_version:  1 \nmain: main.Rmd\ndisplay: display.html", 
            "title": "ERC configuration file"
        }, 
        {
            "location": "/user-guide/oais/", 
            "text": "ERC preservation aspects in the light of OAIS\n\n\nThe Open Archival Information System (OAIS) reference model is a framework for the preservation and dissimination of digital objects (assets). It has been created by the Consultative Committee for Space Data Systems (CCSDS) and  has since been adopted by a wide range of international institutions. The OAIS provides the terminology and concept of the \ninformation package\n as primitive of the digital preservation workflow. Submission information packages (SIP), Dissimination information packages (DIP) and Archival information packages (AIP) refer to different functional roles of a digital object during (long term) preservation.\n\n\nThe representation information object within OAIS consists of structural and semantic information and is itself linked to other units of representation information, building a representation network. The information contained within the ERC and its metadata serves as representation information and enables the interpretability of the archived software, environment, code, data, text and UI bindings. Standards used for representation are included as local copy of the underlying schema and as reference to their persistent identifiers. The network of information objects describes how the parts of the ERC relate to each other and how they are to be used and understood.\n\n\nReferences\n\n\n\n\nCCSDS (2012): RECOMMENDED PRACTICE FOR AN OAIS REFERENCE MODEL. CCSDS 650.0-M-2 (Magenta Book). \nhttp://public.ccsds.org/publications/archive/650x0m2.pdf\n\n\nMaack, M.N. (2015). The Open Archival Information System (oais) Reference Model.", 
            "title": "ERC & OAIS"
        }, 
        {
            "location": "/user-guide/oais/#erc-preservation-aspects-in-the-light-of-oais", 
            "text": "The Open Archival Information System (OAIS) reference model is a framework for the preservation and dissimination of digital objects (assets). It has been created by the Consultative Committee for Space Data Systems (CCSDS) and  has since been adopted by a wide range of international institutions. The OAIS provides the terminology and concept of the  information package  as primitive of the digital preservation workflow. Submission information packages (SIP), Dissimination information packages (DIP) and Archival information packages (AIP) refer to different functional roles of a digital object during (long term) preservation.  The representation information object within OAIS consists of structural and semantic information and is itself linked to other units of representation information, building a representation network. The information contained within the ERC and its metadata serves as representation information and enables the interpretability of the archived software, environment, code, data, text and UI bindings. Standards used for representation are included as local copy of the underlying schema and as reference to their persistent identifiers. The network of information objects describes how the parts of the ERC relate to each other and how they are to be used and understood.", 
            "title": "ERC preservation aspects in the light of OAIS"
        }, 
        {
            "location": "/user-guide/oais/#references", 
            "text": "CCSDS (2012): RECOMMENDED PRACTICE FOR AN OAIS REFERENCE MODEL. CCSDS 650.0-M-2 (Magenta Book).  http://public.ccsds.org/publications/archive/650x0m2.pdf  Maack, M.N. (2015). The Open Archival Information System (oais) Reference Model.", 
            "title": "References"
        }, 
        {
            "location": "/user-guide/erc_journal_supplement/", 
            "text": "User guide: the ERC as journal supplement\n\n\nTo facilitate integration into open access journals, the ERC can serve as a supplement for a journal article.\nIn that use case a supplement would not contain the full text of the publication but be attached to / linked from and article instead.\nWhile this increases storage size (each ERC must contain all required data and software), introduces duplication (e.g. in the metadata) and spreads out related artifacts (e.g. if each supplement is stored in an independent repository item), it considerably simplifies integration with existing workflows and practices, e.g. by licensing and storing the supplemental material independently from the article, and by not impacting the existing article rendering solution (e.g. static HTML or PDF).\n\n\nWhen the ERC is attached as supplement, it is important to make sure the results are still findable, accessible, interoperable, and reusable, following the FAIR principles.\nA supplemental ERC should most importantly reference the main article via its DOI.\n\n\nAn ERC as supplement must still be a formally complete ERC and as such it satisfies important requirements of reproducible research.\n\n\n\n\nExample\n\n\nA publication contains three figures with data plots.\nTwo approaches are possible:\n\n\n\n\neach of the figures is encapsulated in a minimal ERC containing the needed data, an R script, the rendered figure as a grphic (e.g. a PNG), and its own runtime environment; or\n\n\nall figures are embedded in an R Markdown document, including the article abstract, figure titles, and figure description, and share data files and the runtime environment.\n\n\n\n\nThe latter approach is more user friendly because explanatory context is provided and the HTML-based display file directly supports UI bindings.\n\n\n\n\nRead more on the increasing importance of reproducible supplements scientific records in\n\nGreenbaum et al. 2017\n.", 
            "title": "ERC as supplement"
        }, 
        {
            "location": "/user-guide/erc_journal_supplement/#user-guide-the-erc-as-journal-supplement", 
            "text": "To facilitate integration into open access journals, the ERC can serve as a supplement for a journal article.\nIn that use case a supplement would not contain the full text of the publication but be attached to / linked from and article instead.\nWhile this increases storage size (each ERC must contain all required data and software), introduces duplication (e.g. in the metadata) and spreads out related artifacts (e.g. if each supplement is stored in an independent repository item), it considerably simplifies integration with existing workflows and practices, e.g. by licensing and storing the supplemental material independently from the article, and by not impacting the existing article rendering solution (e.g. static HTML or PDF).  When the ERC is attached as supplement, it is important to make sure the results are still findable, accessible, interoperable, and reusable, following the FAIR principles.\nA supplemental ERC should most importantly reference the main article via its DOI.  An ERC as supplement must still be a formally complete ERC and as such it satisfies important requirements of reproducible research.   Example  A publication contains three figures with data plots.\nTwo approaches are possible:   each of the figures is encapsulated in a minimal ERC containing the needed data, an R script, the rendered figure as a grphic (e.g. a PNG), and its own runtime environment; or  all figures are embedded in an R Markdown document, including the article abstract, figure titles, and figure description, and share data files and the runtime environment.   The latter approach is more user friendly because explanatory context is provided and the HTML-based display file directly supports UI bindings.   Read more on the increasing importance of reproducible supplements scientific records in Greenbaum et al. 2017 .", 
            "title": "User guide: the ERC as journal supplement"
        }, 
        {
            "location": "/dev-guide/", 
            "text": "ERC developer guide\n\n\nAn introduction to the ERC rational and the technology choices made within the project \nOpening Reproducible Research\n, and ideas for downstream products based on ERCs.\nThis documents is targeted at developers who wish to create tools for creating, validating, and consuming ERC.\n\n\n\n\nNote\n\n\nThis guide is a draft. If you have comments or suggestions please file them in the \nissue tracker\n. If you have explicit changes please fork the \ngit repo\n and submit a pull request.\n\n\n\n\nConvention over configuration and DevOps\n\n\nThe ERC specification is inspired by two approaches to improve development and operation of software.\nFirst,  \nconvention  over  configuration\n, e.g. as  practiced  in  the Java build tool \nMaven\n.\n\n\nWe want to create a directory structure with default file names and sensible defaults.\nThis way a typical research workspace should require only minimal configuration in 80% of the cases, while allowing to override each of the settings if need be and providing full customizability in the remaining 20%.\n\n\nFor example, the main command to compile the text manuscript in a bagtainer could be \nknitr::knit(\"\n*\n.Rmd\")\n, with \n*\n being replaced by name of the first RMarkdown file.\nHowever, if a user wants to use \nrmarkdown::render(..)\n on a file named \npublication.md\n, then the default behaviour can be overwritten.\n\n\nSecond, \nDevOps\n, see \nWikipedia\n or \nBoettiger\n.\nAll processing and configuration shall be scripted, no \nclick\n interaction required.\n\n\nReasoning and decisions\n\n\nSome observations\n\n\n\n\nresearchers do their thing and need independence/flexibility, so post-hoc creation will probably be most common and ERC must have low to no impact on workflow\n\n\ndata storage, citation and preservation is solved (repos, bitstream preservation in archives)\n\n\npackaging methods/methodology is solved (R packages, Python packages, \n)\n\n\nsoftware preservation is \nnot\n solved (methods are there, like migration, emulation, but complexity is too high to do this at high granularity)\n\n\nreproducible paper is solved (literate programming, R package dependency handling solutions, ..)\n\n\ncomputational RR requires sandboxing (to make sure everything is there as much as security)\n\n\na service is needed to create ERC for researchers and executes them in a controlled environment\n\n\n\n\nWhy nested containers\n\n\nA user shall have access to the files without starting the runtime container.\nTherefore we have at least two items, so we have a bundle and need an outer container.\nAs a bonus, the outer container can immediately be used to make an ERC conform to specific use cases, such as long term archival.\nAlso the chosen outer container standard is much older and common than the inner container standard, and thus more likely to exist longer.\n\n\nThe alternative of putting everything into the container itself (e.g. using image labels for metadata) can be evaluated in the future.\n\n\nWhy BagIt\n\n\n\n\nWhy Docker\n\n\n\n\n(Docker) containers provide an encapsulation mechanism to package all dependencies of an anylsis\n\n\nduring container execution, and substitution, the build in \ncopy-on-write\n storage only creates copy of files that are changed within the container, thus saving storage capacity\n\n\nvolume mounts allow easy substitution of input data and configurations of analysis\n\n\n\n\nWhy not Singularity\n\n\nSingularity\n is an open source containerization solution.\nIt might very well be a better choice for reproducible research in the future as it stems from the scientific community (HPC), cf. also \nC4RR workshop 2017\n.\nAt the point of starting the specification, Docker was more widespread and implementations more readily available.\nFurthermore the origin of Singularity, high performance computing, is out of scope of ERC.\n\n\nWe do not see an issue in not using Singulary.\nMost importantly, the concepts \nruntime manifest\n and \nruntime image\n are abstract, i.e. independent of Docker and the concrete container tool choice could be made flexible in future versions of the specification.\nSingularity can import Docker images and as such make a transition possible, or even let an implementation use Singularity without touch the specification.\n\n\nWhy not just use plain R?\n\n\nIt would be possible to rely solely on R for replication.\nFor example, the runtime manifest could be a \ncodemeta\n document, and the runtime environment is created based on it outside of the ERC when needed, for example by installing R in the required version.\nAdditionally a package for preserving a state of dependencies could be used, e.g. \npackrat\n.\nThis solution is potentially less storage intensive, because containers replicate an R installation each time.\nSmaller storages might also ease collaboration.\n\n\nHowever, none of these solutions touches the underlying system libraries.\nThe complexity of preserving the runtime environment is transferred from the packaging stage to the unpackaging stage, which is unfavourable because that packaging state \neverything works\n, so better control is ensured at that time.\nThe burden in a plain R solution shifts from authoring to preservation.\n\n\nEven though shipping system binaries within packages is possible (if not common), some packages do use system libraries which are not preserved in a plain R approach.\nAdjusting such packages is not an option.\n\n\nFurthermore, none of the solutions for reproducibility are part of \ncore R\n, even if they are trustworthy (e.g. MRAN). CRAN does not support installing specific package versions.\n\n\nThat is why using an abstraction layer outside of R is preferable.\n\n\nLicensing information\n\n\nWithout proper license credits, the contents of an ERC would be useless based on today\ns copyright laws.\nTherefore we rather have the extra work for authors to define a license than to create something that is unusable by others.\n\n\nOne of the biggest issues is the \nscope of licenses\n, namely what to do about having multiple pieces of code, text, or data with different licenses.\n\n\nPut the identifier into the ERC\n\n\n\n\nmakes it easier to track across platforms\n\n\nis harder for manual creation\n\n\n\n\nWhy use bash\n\n\nWhile it is true that..\n\n\n\n\nWhat\ns oldest lasts longest.\n \nvia\n\n\n\n\nusing containers gives the necessary abstraction and encapsulation, so simply using bash (or make) does not suffice.\n\n\nWhy is validation happening outside the container and not \nin\n the container\n\n\n\n\nbetter user experience (otherwise all info must be transported via stdout)\n\n\nto be sure nothing is manipulated within the validation script\n\n\n\n\nWhy is the data not in the image (inner container) but in the outer container\n\n\n\n\nbetter accessible in the long term\n\n\nno data duplication\n\n\n\n\no2r Platform\n\n\nThe software developed by the o2r project is the reference implementation of the ERC specification.\n\n\nWeb API\n\n\no2r Web API specification\n\n\nArchitecture\n\n\no2r Architecture documentation\n\n\nERC completeness score\n\n\nWhile the ERC is intended to be simple enough to be created manually, the clear requirements on it\ns contents also serve a semi-automatic creation.\nFor example, a user can upload a workspace with data files, and R Markdown document, and an HTML rendering of the document to an online platform, where the runtime manifest and image are automatically created. In such a case, metadata would still be added manually.\n\n\nTo encourage users, especially during the manual steps of the creation process, to provide valuable input a \ncompleteness score\n can be useful.\nComparable to profile editors on social network sites, a percentage based score can be used to highlight content or aspects going beyond the mandatory requirements.\n\n\nImplementing platforms may create their own rules, for example which of the optional metadata elements contribute towards reaching a full score.\nThinking beyond merely the metadata, the score could also cover the runtime manifest (e.g. does it follow common practices, include relevant independent metadata, uses explicit versioning for dependency installation), contained code (e.g. automatic checks against code formatting guidelines, syntactical errors), and contained data (e.g. are open file formats used, maybe rewarding CSV over Shapefiles).\n\n\nA completeness score can be seen as a \ndownstream product\n based on the ERC.\nIt is unlikely this ever makes it into an ERC specification, but it can be a crucial means towards acceptance, adoption, and success of ERCs.", 
            "title": "Developer guide"
        }, 
        {
            "location": "/dev-guide/#erc-developer-guide", 
            "text": "An introduction to the ERC rational and the technology choices made within the project  Opening Reproducible Research , and ideas for downstream products based on ERCs.\nThis documents is targeted at developers who wish to create tools for creating, validating, and consuming ERC.   Note  This guide is a draft. If you have comments or suggestions please file them in the  issue tracker . If you have explicit changes please fork the  git repo  and submit a pull request.", 
            "title": "ERC developer guide"
        }, 
        {
            "location": "/dev-guide/#convention-over-configuration-and-devops", 
            "text": "The ERC specification is inspired by two approaches to improve development and operation of software.\nFirst,   convention  over  configuration , e.g. as  practiced  in  the Java build tool  Maven .  We want to create a directory structure with default file names and sensible defaults.\nThis way a typical research workspace should require only minimal configuration in 80% of the cases, while allowing to override each of the settings if need be and providing full customizability in the remaining 20%.  For example, the main command to compile the text manuscript in a bagtainer could be  knitr::knit(\" * .Rmd\") , with  *  being replaced by name of the first RMarkdown file.\nHowever, if a user wants to use  rmarkdown::render(..)  on a file named  publication.md , then the default behaviour can be overwritten.  Second,  DevOps , see  Wikipedia  or  Boettiger .\nAll processing and configuration shall be scripted, no  click  interaction required.", 
            "title": "Convention over configuration and DevOps"
        }, 
        {
            "location": "/dev-guide/#reasoning-and-decisions", 
            "text": "", 
            "title": "Reasoning and decisions"
        }, 
        {
            "location": "/dev-guide/#some-observations", 
            "text": "researchers do their thing and need independence/flexibility, so post-hoc creation will probably be most common and ERC must have low to no impact on workflow  data storage, citation and preservation is solved (repos, bitstream preservation in archives)  packaging methods/methodology is solved (R packages, Python packages,  )  software preservation is  not  solved (methods are there, like migration, emulation, but complexity is too high to do this at high granularity)  reproducible paper is solved (literate programming, R package dependency handling solutions, ..)  computational RR requires sandboxing (to make sure everything is there as much as security)  a service is needed to create ERC for researchers and executes them in a controlled environment", 
            "title": "Some observations"
        }, 
        {
            "location": "/dev-guide/#why-nested-containers", 
            "text": "A user shall have access to the files without starting the runtime container.\nTherefore we have at least two items, so we have a bundle and need an outer container.\nAs a bonus, the outer container can immediately be used to make an ERC conform to specific use cases, such as long term archival.\nAlso the chosen outer container standard is much older and common than the inner container standard, and thus more likely to exist longer.  The alternative of putting everything into the container itself (e.g. using image labels for metadata) can be evaluated in the future.", 
            "title": "Why nested containers"
        }, 
        {
            "location": "/dev-guide/#why-bagit", 
            "text": "", 
            "title": "Why BagIt"
        }, 
        {
            "location": "/dev-guide/#why-docker", 
            "text": "(Docker) containers provide an encapsulation mechanism to package all dependencies of an anylsis  during container execution, and substitution, the build in  copy-on-write  storage only creates copy of files that are changed within the container, thus saving storage capacity  volume mounts allow easy substitution of input data and configurations of analysis", 
            "title": "Why Docker"
        }, 
        {
            "location": "/dev-guide/#why-not-singularity", 
            "text": "Singularity  is an open source containerization solution.\nIt might very well be a better choice for reproducible research in the future as it stems from the scientific community (HPC), cf. also  C4RR workshop 2017 .\nAt the point of starting the specification, Docker was more widespread and implementations more readily available.\nFurthermore the origin of Singularity, high performance computing, is out of scope of ERC.  We do not see an issue in not using Singulary.\nMost importantly, the concepts  runtime manifest  and  runtime image  are abstract, i.e. independent of Docker and the concrete container tool choice could be made flexible in future versions of the specification.\nSingularity can import Docker images and as such make a transition possible, or even let an implementation use Singularity without touch the specification.", 
            "title": "Why not Singularity"
        }, 
        {
            "location": "/dev-guide/#why-not-just-use-plain-r", 
            "text": "It would be possible to rely solely on R for replication.\nFor example, the runtime manifest could be a  codemeta  document, and the runtime environment is created based on it outside of the ERC when needed, for example by installing R in the required version.\nAdditionally a package for preserving a state of dependencies could be used, e.g.  packrat .\nThis solution is potentially less storage intensive, because containers replicate an R installation each time.\nSmaller storages might also ease collaboration.  However, none of these solutions touches the underlying system libraries.\nThe complexity of preserving the runtime environment is transferred from the packaging stage to the unpackaging stage, which is unfavourable because that packaging state  everything works , so better control is ensured at that time.\nThe burden in a plain R solution shifts from authoring to preservation.  Even though shipping system binaries within packages is possible (if not common), some packages do use system libraries which are not preserved in a plain R approach.\nAdjusting such packages is not an option.  Furthermore, none of the solutions for reproducibility are part of  core R , even if they are trustworthy (e.g. MRAN). CRAN does not support installing specific package versions.  That is why using an abstraction layer outside of R is preferable.", 
            "title": "Why not just use plain R?"
        }, 
        {
            "location": "/dev-guide/#licensing-information", 
            "text": "Without proper license credits, the contents of an ERC would be useless based on today s copyright laws.\nTherefore we rather have the extra work for authors to define a license than to create something that is unusable by others.  One of the biggest issues is the  scope of licenses , namely what to do about having multiple pieces of code, text, or data with different licenses.", 
            "title": "Licensing information"
        }, 
        {
            "location": "/dev-guide/#put-the-identifier-into-the-erc", 
            "text": "makes it easier to track across platforms  is harder for manual creation", 
            "title": "Put the identifier into the ERC"
        }, 
        {
            "location": "/dev-guide/#why-use-bash", 
            "text": "While it is true that..   What s oldest lasts longest.   via   using containers gives the necessary abstraction and encapsulation, so simply using bash (or make) does not suffice.", 
            "title": "Why use bash"
        }, 
        {
            "location": "/dev-guide/#why-is-validation-happening-outside-the-container-and-not-in-the-container", 
            "text": "better user experience (otherwise all info must be transported via stdout)  to be sure nothing is manipulated within the validation script", 
            "title": "Why is validation happening outside the container and not in the container"
        }, 
        {
            "location": "/dev-guide/#why-is-the-data-not-in-the-image-inner-container-but-in-the-outer-container", 
            "text": "better accessible in the long term  no data duplication", 
            "title": "Why is the data not in the image (inner container) but in the outer container"
        }, 
        {
            "location": "/dev-guide/#o2r-platform", 
            "text": "The software developed by the o2r project is the reference implementation of the ERC specification.", 
            "title": "o2r Platform"
        }, 
        {
            "location": "/dev-guide/#web-api", 
            "text": "o2r Web API specification", 
            "title": "Web API"
        }, 
        {
            "location": "/dev-guide/#architecture", 
            "text": "o2r Architecture documentation", 
            "title": "Architecture"
        }, 
        {
            "location": "/dev-guide/#erc-completeness-score", 
            "text": "While the ERC is intended to be simple enough to be created manually, the clear requirements on it s contents also serve a semi-automatic creation.\nFor example, a user can upload a workspace with data files, and R Markdown document, and an HTML rendering of the document to an online platform, where the runtime manifest and image are automatically created. In such a case, metadata would still be added manually.  To encourage users, especially during the manual steps of the creation process, to provide valuable input a  completeness score  can be useful.\nComparable to profile editors on social network sites, a percentage based score can be used to highlight content or aspects going beyond the mandatory requirements.  Implementing platforms may create their own rules, for example which of the optional metadata elements contribute towards reaching a full score.\nThinking beyond merely the metadata, the score could also cover the runtime manifest (e.g. does it follow common practices, include relevant independent metadata, uses explicit versioning for dependency installation), contained code (e.g. automatic checks against code formatting guidelines, syntactical errors), and contained data (e.g. are open file formats used, maybe rewarding CSV over Shapefiles).  A completeness score can be seen as a  downstream product  based on the ERC.\nIt is unlikely this ever makes it into an ERC specification, but it can be a crucial means towards acceptance, adoption, and success of ERCs.", 
            "title": "ERC completeness score"
        }, 
        {
            "location": "/glossary/", 
            "text": "Glossary\n\n\n(Computational) Analysis\n\n\nA scientific workflow that is to be preserved in an ERC.\nIt conducts a number of operations on data and generates an output (text, numbers, plots).\n\n\nBag\n\n\nSee \nBagIt specification\n.\n\n\n\n\nA set of opaque data contained within the structure defined by this specification.\n\n\n\n\nCompendium contents\n\n\nSee \nERC contents\n\n\nContainer\n\n\nA receptacle holding a collection of things (\npayload\n or \ncontents\n).\nIn the context of this specification, several containers are distinguished: \nruntime container\n (with \nDocker container\n as a concrete instance) and \nouter container\n.\n\n\nCheck\n\n\nA subconstituent of \nExamine\n.\nChecking an ERC is a syntactical validation, which may be largely automated by a software tool reporting the check result and potential errors.\nA check comprises (a) the validation of a concrete ERC against the ERC specification, e.g. are required files and metadata fields present, and (b) an execution of the contained analysis.\nThe execution includes a comparison of the result files in the just executed inner container with the result stored in the outer container.\n\n\nCreate\n\n\nOne of the major constituents of ERC interaction.\nThe user can create an ERC by following the technical instructions included in the Specification (ERC Spec) or use the o2r reproducibility service, which has been referentially implemented as \no2r platform\n.\nFor more information, see [erc-spec/user-guide/creation/]\n\n\nDiscover\n\n\nOne of the major constituents of ERC interaction.\nDiscovery comprises the findability of the ERC as well as the exploration of its features, e.g. time and space driven search operations.\n\n\nDocker container\n\n\nTBD\n\n\nERC\n\n\nExecutable Research Compendium, see \nthis article\n\n\nERC contents\n\n\nSee \nworkspace\n.\n\n\nERC metadata\n\n\nSchema compliant information about the ERC, its contents and creators.\n\n\nExamine\n\n\nOne of the major constituents of ERC interaction.\nIt comprises \nCheck\n, \nInspect\n, \nManipulate\n and \nSubstitute\n.\nTo examine an ERC means to explore its contents in depth, i.e. check the reproduced version, inspect text, code and data, manipulate interactive elements, as well as exchange input data.\n\n\nInner container\n\n\nSee \nruntime container\n\n\nInspect\n\n\nA subconstituent of \nExamine\n.\nInspection includes looking at all the contents of an ERC, such as code or data files, and metadata documents.\nA user conducting inspection evaluates the meaning of the ERC\ns artifacts.\n\n\nDisplay file\n\n\nThe file in the container that a reader software uses as the first display to a user to read text and explore graphics.\nThe entry point for \nexamination\n. \n\n\nManipulate\n\n\nA subconstituent of \nExamine\n.\nA manipulation comprises interactive changing of selected, pre-defined parameters that influence the computation packaged in an ERC.\nFor example, the number of layers in a neural network, the size/selection method of the training dataset in supervised machine learning, or the variogram model of geostatistical kriging.\nThese parameters are defined via \nUI bindings\n.\n\n\nOAIS\n\n\nThe \nOpen Archival Information System\n and its \nreference model\n.\n\n\nOuter container\n\n\nTerm used to distinguish the \nouter\n \nBag\n from the embedded \nruntime container\n.\n\n\nReproducible, Reproducibility, Replication\n\n\nSee \nsection 2.1 \nDefinition of Reproducibility\n.\n\n\nRuntime container\n\n\nTBD\n\n\nSubstitute\n\n\nA subconstituent of \nExamine\n.\nDuring a substitution, compatible parts of an ERC are exchanged, e.g. similar data sets for a given analysis, or exchanging an analysis script.\nA substution process usually creates a new ERC based on two input ERCs: the \nbase ERC\n and the \noverlay ERC\n.\nOne or several data or code files from the \noverlay ERC\n replace corresponding files in the \nbase ERC\n, to create a new ERC.\n\n\nUI bindings\n\n\nTBD\n\n\nWorkspace\n\n\nThe files created by the author of the original analysis, packages together with ERC metadata in the \nouter container\n.", 
            "title": "Glossary"
        }, 
        {
            "location": "/glossary/#glossary", 
            "text": "", 
            "title": "Glossary"
        }, 
        {
            "location": "/glossary/#computational-analysis", 
            "text": "A scientific workflow that is to be preserved in an ERC.\nIt conducts a number of operations on data and generates an output (text, numbers, plots).", 
            "title": "(Computational) Analysis"
        }, 
        {
            "location": "/glossary/#bag", 
            "text": "See  BagIt specification .   A set of opaque data contained within the structure defined by this specification.", 
            "title": "Bag"
        }, 
        {
            "location": "/glossary/#compendium-contents", 
            "text": "See  ERC contents", 
            "title": "Compendium contents"
        }, 
        {
            "location": "/glossary/#container", 
            "text": "A receptacle holding a collection of things ( payload  or  contents ).\nIn the context of this specification, several containers are distinguished:  runtime container  (with  Docker container  as a concrete instance) and  outer container .", 
            "title": "Container"
        }, 
        {
            "location": "/glossary/#check", 
            "text": "A subconstituent of  Examine .\nChecking an ERC is a syntactical validation, which may be largely automated by a software tool reporting the check result and potential errors.\nA check comprises (a) the validation of a concrete ERC against the ERC specification, e.g. are required files and metadata fields present, and (b) an execution of the contained analysis.\nThe execution includes a comparison of the result files in the just executed inner container with the result stored in the outer container.", 
            "title": "Check"
        }, 
        {
            "location": "/glossary/#create", 
            "text": "One of the major constituents of ERC interaction.\nThe user can create an ERC by following the technical instructions included in the Specification (ERC Spec) or use the o2r reproducibility service, which has been referentially implemented as  o2r platform .\nFor more information, see [erc-spec/user-guide/creation/]", 
            "title": "Create"
        }, 
        {
            "location": "/glossary/#discover", 
            "text": "One of the major constituents of ERC interaction.\nDiscovery comprises the findability of the ERC as well as the exploration of its features, e.g. time and space driven search operations.", 
            "title": "Discover"
        }, 
        {
            "location": "/glossary/#docker-container", 
            "text": "TBD", 
            "title": "Docker container"
        }, 
        {
            "location": "/glossary/#erc", 
            "text": "Executable Research Compendium, see  this article", 
            "title": "ERC"
        }, 
        {
            "location": "/glossary/#erc-contents", 
            "text": "See  workspace .", 
            "title": "ERC contents"
        }, 
        {
            "location": "/glossary/#erc-metadata", 
            "text": "Schema compliant information about the ERC, its contents and creators.", 
            "title": "ERC metadata"
        }, 
        {
            "location": "/glossary/#examine", 
            "text": "One of the major constituents of ERC interaction.\nIt comprises  Check ,  Inspect ,  Manipulate  and  Substitute .\nTo examine an ERC means to explore its contents in depth, i.e. check the reproduced version, inspect text, code and data, manipulate interactive elements, as well as exchange input data.", 
            "title": "Examine"
        }, 
        {
            "location": "/glossary/#inner-container", 
            "text": "See  runtime container", 
            "title": "Inner container"
        }, 
        {
            "location": "/glossary/#inspect", 
            "text": "A subconstituent of  Examine .\nInspection includes looking at all the contents of an ERC, such as code or data files, and metadata documents.\nA user conducting inspection evaluates the meaning of the ERC s artifacts.", 
            "title": "Inspect"
        }, 
        {
            "location": "/glossary/#display-file", 
            "text": "The file in the container that a reader software uses as the first display to a user to read text and explore graphics.\nThe entry point for  examination .", 
            "title": "Display file"
        }, 
        {
            "location": "/glossary/#manipulate", 
            "text": "A subconstituent of  Examine .\nA manipulation comprises interactive changing of selected, pre-defined parameters that influence the computation packaged in an ERC.\nFor example, the number of layers in a neural network, the size/selection method of the training dataset in supervised machine learning, or the variogram model of geostatistical kriging.\nThese parameters are defined via  UI bindings .", 
            "title": "Manipulate"
        }, 
        {
            "location": "/glossary/#oais", 
            "text": "The  Open Archival Information System  and its  reference model .", 
            "title": "OAIS"
        }, 
        {
            "location": "/glossary/#outer-container", 
            "text": "Term used to distinguish the  outer   Bag  from the embedded  runtime container .", 
            "title": "Outer container"
        }, 
        {
            "location": "/glossary/#reproducible-reproducibility-replication", 
            "text": "See  section 2.1  Definition of Reproducibility .", 
            "title": "Reproducible, Reproducibility, Replication"
        }, 
        {
            "location": "/glossary/#runtime-container", 
            "text": "TBD", 
            "title": "Runtime container"
        }, 
        {
            "location": "/glossary/#substitute", 
            "text": "A subconstituent of  Examine .\nDuring a substitution, compatible parts of an ERC are exchanged, e.g. similar data sets for a given analysis, or exchanging an analysis script.\nA substution process usually creates a new ERC based on two input ERCs: the  base ERC  and the  overlay ERC .\nOne or several data or code files from the  overlay ERC  replace corresponding files in the  base ERC , to create a new ERC.", 
            "title": "Substitute"
        }, 
        {
            "location": "/glossary/#ui-bindings", 
            "text": "TBD", 
            "title": "UI bindings"
        }, 
        {
            "location": "/glossary/#workspace", 
            "text": "The files created by the author of the original analysis, packages together with ERC metadata in the  outer container .", 
            "title": "Workspace"
        }, 
        {
            "location": "/support/", 
            "text": "Support\n\n\nIf you have questions about the ERC specification and its usage which are not answered by the \nuser and developer guides\n, feel free to contact us using the options below.\n\n\nEmail\n\n\ndaniel.nuest@uni-muenster.de\n\n\nDiscussion forum\n\n\n\n\n\n\n    var disqus_config = function () {\n        this.page.url = \"http://o2r.info/erc-spec/support\";\n        this.page.identifier = \"erc-spec-support\";\n    };\n    (function() {\n        var d = document, s = d.createElement('script');\n        s.src = '//o2r-blog.disqus.com/embed.js';\n        s.setAttribute('data-timestamp', +new Date());\n        (d.head || d.body).appendChild(s);\n    })();\n\n\n\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Support"
        }, 
        {
            "location": "/support/#support", 
            "text": "If you have questions about the ERC specification and its usage which are not answered by the  user and developer guides , feel free to contact us using the options below.", 
            "title": "Support"
        }, 
        {
            "location": "/support/#email", 
            "text": "daniel.nuest@uni-muenster.de", 
            "title": "Email"
        }, 
        {
            "location": "/support/#discussion-forum", 
            "text": "var disqus_config = function () {\n        this.page.url = \"http://o2r.info/erc-spec/support\";\n        this.page.identifier = \"erc-spec-support\";\n    };\n    (function() {\n        var d = document, s = d.createElement('script');\n        s.src = '//o2r-blog.disqus.com/embed.js';\n        s.setAttribute('data-timestamp', +new Date());\n        (d.head || d.body).appendChild(s);\n    })();   Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "Discussion forum"
        }
    ]
}